
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Lobby
 * 
 */
export type Lobby = $Result.DefaultSelection<Prisma.$LobbyPayload>
/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>
/**
 * Model Match
 * 
 */
export type Match = $Result.DefaultSelection<Prisma.$MatchPayload>
/**
 * Model UserProfile
 * 
 */
export type UserProfile = $Result.DefaultSelection<Prisma.$UserProfilePayload>
/**
 * Model LobbyParticipant
 * 
 */
export type LobbyParticipant = $Result.DefaultSelection<Prisma.$LobbyParticipantPayload>
/**
 * Model PlayerStats
 * 
 */
export type PlayerStats = $Result.DefaultSelection<Prisma.$PlayerStatsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const GameMode: {
  SR_5v5: 'SR_5v5',
  SR_4v4: 'SR_4v4',
  SR_3v3: 'SR_3v3',
  SR_2v2: 'SR_2v2'
};

export type GameMode = (typeof GameMode)[keyof typeof GameMode]


export const LobbyState: {
  CREATED: 'CREATED',
  RUNNING: 'RUNNING',
  FINISHED: 'FINISHED'
};

export type LobbyState = (typeof LobbyState)[keyof typeof LobbyState]


export const MatchState: {
  PENDING: 'PENDING',
  DONE: 'DONE'
};

export type MatchState = (typeof MatchState)[keyof typeof MatchState]


export const LoLRegion: {
  EUW: 'EUW',
  EUNE: 'EUNE',
  NA: 'NA',
  KR: 'KR',
  JP: 'JP',
  OCE: 'OCE',
  BR: 'BR',
  LAN: 'LAN',
  LAS: 'LAS',
  TR: 'TR',
  RU: 'RU'
};

export type LoLRegion = (typeof LoLRegion)[keyof typeof LoLRegion]


export const RoleName: {
  TOP: 'TOP',
  JUNGLE: 'JUNGLE',
  MID: 'MID',
  ADC: 'ADC',
  SUPPORT: 'SUPPORT',
  FLEX: 'FLEX'
};

export type RoleName = (typeof RoleName)[keyof typeof RoleName]

}

export type GameMode = $Enums.GameMode

export const GameMode: typeof $Enums.GameMode

export type LobbyState = $Enums.LobbyState

export const LobbyState: typeof $Enums.LobbyState

export type MatchState = $Enums.MatchState

export const MatchState: typeof $Enums.MatchState

export type LoLRegion = $Enums.LoLRegion

export const LoLRegion: typeof $Enums.LoLRegion

export type RoleName = $Enums.RoleName

export const RoleName: typeof $Enums.RoleName

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Lobbies
 * const lobbies = await prisma.lobby.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Lobbies
   * const lobbies = await prisma.lobby.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.lobby`: Exposes CRUD operations for the **Lobby** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lobbies
    * const lobbies = await prisma.lobby.findMany()
    * ```
    */
  get lobby(): Prisma.LobbyDelegate<ExtArgs>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs>;

  /**
   * `prisma.match`: Exposes CRUD operations for the **Match** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Matches
    * const matches = await prisma.match.findMany()
    * ```
    */
  get match(): Prisma.MatchDelegate<ExtArgs>;

  /**
   * `prisma.userProfile`: Exposes CRUD operations for the **UserProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProfiles
    * const userProfiles = await prisma.userProfile.findMany()
    * ```
    */
  get userProfile(): Prisma.UserProfileDelegate<ExtArgs>;

  /**
   * `prisma.lobbyParticipant`: Exposes CRUD operations for the **LobbyParticipant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LobbyParticipants
    * const lobbyParticipants = await prisma.lobbyParticipant.findMany()
    * ```
    */
  get lobbyParticipant(): Prisma.LobbyParticipantDelegate<ExtArgs>;

  /**
   * `prisma.playerStats`: Exposes CRUD operations for the **PlayerStats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlayerStats
    * const playerStats = await prisma.playerStats.findMany()
    * ```
    */
  get playerStats(): Prisma.PlayerStatsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Lobby: 'Lobby',
    Team: 'Team',
    Match: 'Match',
    UserProfile: 'UserProfile',
    LobbyParticipant: 'LobbyParticipant',
    PlayerStats: 'PlayerStats'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "lobby" | "team" | "match" | "userProfile" | "lobbyParticipant" | "playerStats"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Lobby: {
        payload: Prisma.$LobbyPayload<ExtArgs>
        fields: Prisma.LobbyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LobbyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LobbyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LobbyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LobbyPayload>
          }
          findFirst: {
            args: Prisma.LobbyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LobbyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LobbyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LobbyPayload>
          }
          findMany: {
            args: Prisma.LobbyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LobbyPayload>[]
          }
          create: {
            args: Prisma.LobbyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LobbyPayload>
          }
          createMany: {
            args: Prisma.LobbyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LobbyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LobbyPayload>[]
          }
          delete: {
            args: Prisma.LobbyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LobbyPayload>
          }
          update: {
            args: Prisma.LobbyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LobbyPayload>
          }
          deleteMany: {
            args: Prisma.LobbyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LobbyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LobbyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LobbyPayload>
          }
          aggregate: {
            args: Prisma.LobbyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLobby>
          }
          groupBy: {
            args: Prisma.LobbyGroupByArgs<ExtArgs>
            result: $Utils.Optional<LobbyGroupByOutputType>[]
          }
          count: {
            args: Prisma.LobbyCountArgs<ExtArgs>
            result: $Utils.Optional<LobbyCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      Match: {
        payload: Prisma.$MatchPayload<ExtArgs>
        fields: Prisma.MatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findFirst: {
            args: Prisma.MatchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findMany: {
            args: Prisma.MatchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          create: {
            args: Prisma.MatchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          createMany: {
            args: Prisma.MatchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MatchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          delete: {
            args: Prisma.MatchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          update: {
            args: Prisma.MatchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          deleteMany: {
            args: Prisma.MatchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MatchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          aggregate: {
            args: Prisma.MatchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatch>
          }
          groupBy: {
            args: Prisma.MatchGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchCountArgs<ExtArgs>
            result: $Utils.Optional<MatchCountAggregateOutputType> | number
          }
        }
      }
      UserProfile: {
        payload: Prisma.$UserProfilePayload<ExtArgs>
        fields: Prisma.UserProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          findFirst: {
            args: Prisma.UserProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          findMany: {
            args: Prisma.UserProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          create: {
            args: Prisma.UserProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          createMany: {
            args: Prisma.UserProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          delete: {
            args: Prisma.UserProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          update: {
            args: Prisma.UserProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          deleteMany: {
            args: Prisma.UserProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          aggregate: {
            args: Prisma.UserProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserProfile>
          }
          groupBy: {
            args: Prisma.UserProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserProfileCountArgs<ExtArgs>
            result: $Utils.Optional<UserProfileCountAggregateOutputType> | number
          }
        }
      }
      LobbyParticipant: {
        payload: Prisma.$LobbyParticipantPayload<ExtArgs>
        fields: Prisma.LobbyParticipantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LobbyParticipantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LobbyParticipantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LobbyParticipantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LobbyParticipantPayload>
          }
          findFirst: {
            args: Prisma.LobbyParticipantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LobbyParticipantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LobbyParticipantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LobbyParticipantPayload>
          }
          findMany: {
            args: Prisma.LobbyParticipantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LobbyParticipantPayload>[]
          }
          create: {
            args: Prisma.LobbyParticipantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LobbyParticipantPayload>
          }
          createMany: {
            args: Prisma.LobbyParticipantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LobbyParticipantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LobbyParticipantPayload>[]
          }
          delete: {
            args: Prisma.LobbyParticipantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LobbyParticipantPayload>
          }
          update: {
            args: Prisma.LobbyParticipantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LobbyParticipantPayload>
          }
          deleteMany: {
            args: Prisma.LobbyParticipantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LobbyParticipantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LobbyParticipantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LobbyParticipantPayload>
          }
          aggregate: {
            args: Prisma.LobbyParticipantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLobbyParticipant>
          }
          groupBy: {
            args: Prisma.LobbyParticipantGroupByArgs<ExtArgs>
            result: $Utils.Optional<LobbyParticipantGroupByOutputType>[]
          }
          count: {
            args: Prisma.LobbyParticipantCountArgs<ExtArgs>
            result: $Utils.Optional<LobbyParticipantCountAggregateOutputType> | number
          }
        }
      }
      PlayerStats: {
        payload: Prisma.$PlayerStatsPayload<ExtArgs>
        fields: Prisma.PlayerStatsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerStatsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerStatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerStatsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerStatsPayload>
          }
          findFirst: {
            args: Prisma.PlayerStatsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerStatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerStatsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerStatsPayload>
          }
          findMany: {
            args: Prisma.PlayerStatsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerStatsPayload>[]
          }
          create: {
            args: Prisma.PlayerStatsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerStatsPayload>
          }
          createMany: {
            args: Prisma.PlayerStatsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlayerStatsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerStatsPayload>[]
          }
          delete: {
            args: Prisma.PlayerStatsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerStatsPayload>
          }
          update: {
            args: Prisma.PlayerStatsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerStatsPayload>
          }
          deleteMany: {
            args: Prisma.PlayerStatsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerStatsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlayerStatsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerStatsPayload>
          }
          aggregate: {
            args: Prisma.PlayerStatsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayerStats>
          }
          groupBy: {
            args: Prisma.PlayerStatsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerStatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerStatsCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerStatsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type LobbyCountOutputType
   */

  export type LobbyCountOutputType = {
    participants: number
    teams: number
    matches: number
  }

  export type LobbyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | LobbyCountOutputTypeCountParticipantsArgs
    teams?: boolean | LobbyCountOutputTypeCountTeamsArgs
    matches?: boolean | LobbyCountOutputTypeCountMatchesArgs
  }

  // Custom InputTypes
  /**
   * LobbyCountOutputType without action
   */
  export type LobbyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LobbyCountOutputType
     */
    select?: LobbyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LobbyCountOutputType without action
   */
  export type LobbyCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LobbyParticipantWhereInput
  }

  /**
   * LobbyCountOutputType without action
   */
  export type LobbyCountOutputTypeCountTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
  }

  /**
   * LobbyCountOutputType without action
   */
  export type LobbyCountOutputTypeCountMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }


  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    blueMatches: number
    redMatches: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    blueMatches?: boolean | TeamCountOutputTypeCountBlueMatchesArgs
    redMatches?: boolean | TeamCountOutputTypeCountRedMatchesArgs
  }

  // Custom InputTypes
  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountBlueMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountRedMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }


  /**
   * Count Type UserProfileCountOutputType
   */

  export type UserProfileCountOutputType = {
    participations: number
  }

  export type UserProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participations?: boolean | UserProfileCountOutputTypeCountParticipationsArgs
  }

  // Custom InputTypes
  /**
   * UserProfileCountOutputType without action
   */
  export type UserProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileCountOutputType
     */
    select?: UserProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserProfileCountOutputType without action
   */
  export type UserProfileCountOutputTypeCountParticipationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LobbyParticipantWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Lobby
   */

  export type AggregateLobby = {
    _count: LobbyCountAggregateOutputType | null
    _avg: LobbyAvgAggregateOutputType | null
    _sum: LobbySumAggregateOutputType | null
    _min: LobbyMinAggregateOutputType | null
    _max: LobbyMaxAggregateOutputType | null
  }

  export type LobbyAvgAggregateOutputType = {
    slots: number | null
    currentRound: number | null
  }

  export type LobbySumAggregateOutputType = {
    slots: number | null
    currentRound: number | null
  }

  export type LobbyMinAggregateOutputType = {
    id: string | null
    guildId: string | null
    channelId: string | null
    messageId: string | null
    name: string | null
    slots: number | null
    mode: $Enums.GameMode | null
    state: $Enums.LobbyState | null
    createdBy: string | null
    currentRound: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LobbyMaxAggregateOutputType = {
    id: string | null
    guildId: string | null
    channelId: string | null
    messageId: string | null
    name: string | null
    slots: number | null
    mode: $Enums.GameMode | null
    state: $Enums.LobbyState | null
    createdBy: string | null
    currentRound: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LobbyCountAggregateOutputType = {
    id: number
    guildId: number
    channelId: number
    messageId: number
    name: number
    slots: number
    mode: number
    state: number
    createdBy: number
    currentRound: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LobbyAvgAggregateInputType = {
    slots?: true
    currentRound?: true
  }

  export type LobbySumAggregateInputType = {
    slots?: true
    currentRound?: true
  }

  export type LobbyMinAggregateInputType = {
    id?: true
    guildId?: true
    channelId?: true
    messageId?: true
    name?: true
    slots?: true
    mode?: true
    state?: true
    createdBy?: true
    currentRound?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LobbyMaxAggregateInputType = {
    id?: true
    guildId?: true
    channelId?: true
    messageId?: true
    name?: true
    slots?: true
    mode?: true
    state?: true
    createdBy?: true
    currentRound?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LobbyCountAggregateInputType = {
    id?: true
    guildId?: true
    channelId?: true
    messageId?: true
    name?: true
    slots?: true
    mode?: true
    state?: true
    createdBy?: true
    currentRound?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LobbyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lobby to aggregate.
     */
    where?: LobbyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lobbies to fetch.
     */
    orderBy?: LobbyOrderByWithRelationInput | LobbyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LobbyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lobbies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lobbies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lobbies
    **/
    _count?: true | LobbyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LobbyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LobbySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LobbyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LobbyMaxAggregateInputType
  }

  export type GetLobbyAggregateType<T extends LobbyAggregateArgs> = {
        [P in keyof T & keyof AggregateLobby]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLobby[P]>
      : GetScalarType<T[P], AggregateLobby[P]>
  }




  export type LobbyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LobbyWhereInput
    orderBy?: LobbyOrderByWithAggregationInput | LobbyOrderByWithAggregationInput[]
    by: LobbyScalarFieldEnum[] | LobbyScalarFieldEnum
    having?: LobbyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LobbyCountAggregateInputType | true
    _avg?: LobbyAvgAggregateInputType
    _sum?: LobbySumAggregateInputType
    _min?: LobbyMinAggregateInputType
    _max?: LobbyMaxAggregateInputType
  }

  export type LobbyGroupByOutputType = {
    id: string
    guildId: string
    channelId: string
    messageId: string | null
    name: string
    slots: number
    mode: $Enums.GameMode
    state: $Enums.LobbyState
    createdBy: string
    currentRound: number
    createdAt: Date
    updatedAt: Date
    _count: LobbyCountAggregateOutputType | null
    _avg: LobbyAvgAggregateOutputType | null
    _sum: LobbySumAggregateOutputType | null
    _min: LobbyMinAggregateOutputType | null
    _max: LobbyMaxAggregateOutputType | null
  }

  type GetLobbyGroupByPayload<T extends LobbyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LobbyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LobbyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LobbyGroupByOutputType[P]>
            : GetScalarType<T[P], LobbyGroupByOutputType[P]>
        }
      >
    >


  export type LobbySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    guildId?: boolean
    channelId?: boolean
    messageId?: boolean
    name?: boolean
    slots?: boolean
    mode?: boolean
    state?: boolean
    createdBy?: boolean
    currentRound?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    participants?: boolean | Lobby$participantsArgs<ExtArgs>
    teams?: boolean | Lobby$teamsArgs<ExtArgs>
    matches?: boolean | Lobby$matchesArgs<ExtArgs>
    _count?: boolean | LobbyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lobby"]>

  export type LobbySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    guildId?: boolean
    channelId?: boolean
    messageId?: boolean
    name?: boolean
    slots?: boolean
    mode?: boolean
    state?: boolean
    createdBy?: boolean
    currentRound?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["lobby"]>

  export type LobbySelectScalar = {
    id?: boolean
    guildId?: boolean
    channelId?: boolean
    messageId?: boolean
    name?: boolean
    slots?: boolean
    mode?: boolean
    state?: boolean
    createdBy?: boolean
    currentRound?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LobbyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | Lobby$participantsArgs<ExtArgs>
    teams?: boolean | Lobby$teamsArgs<ExtArgs>
    matches?: boolean | Lobby$matchesArgs<ExtArgs>
    _count?: boolean | LobbyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LobbyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LobbyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lobby"
    objects: {
      participants: Prisma.$LobbyParticipantPayload<ExtArgs>[]
      teams: Prisma.$TeamPayload<ExtArgs>[]
      matches: Prisma.$MatchPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      guildId: string
      channelId: string
      messageId: string | null
      name: string
      slots: number
      mode: $Enums.GameMode
      state: $Enums.LobbyState
      createdBy: string
      currentRound: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["lobby"]>
    composites: {}
  }

  type LobbyGetPayload<S extends boolean | null | undefined | LobbyDefaultArgs> = $Result.GetResult<Prisma.$LobbyPayload, S>

  type LobbyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LobbyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LobbyCountAggregateInputType | true
    }

  export interface LobbyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lobby'], meta: { name: 'Lobby' } }
    /**
     * Find zero or one Lobby that matches the filter.
     * @param {LobbyFindUniqueArgs} args - Arguments to find a Lobby
     * @example
     * // Get one Lobby
     * const lobby = await prisma.lobby.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LobbyFindUniqueArgs>(args: SelectSubset<T, LobbyFindUniqueArgs<ExtArgs>>): Prisma__LobbyClient<$Result.GetResult<Prisma.$LobbyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Lobby that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LobbyFindUniqueOrThrowArgs} args - Arguments to find a Lobby
     * @example
     * // Get one Lobby
     * const lobby = await prisma.lobby.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LobbyFindUniqueOrThrowArgs>(args: SelectSubset<T, LobbyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LobbyClient<$Result.GetResult<Prisma.$LobbyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Lobby that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LobbyFindFirstArgs} args - Arguments to find a Lobby
     * @example
     * // Get one Lobby
     * const lobby = await prisma.lobby.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LobbyFindFirstArgs>(args?: SelectSubset<T, LobbyFindFirstArgs<ExtArgs>>): Prisma__LobbyClient<$Result.GetResult<Prisma.$LobbyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Lobby that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LobbyFindFirstOrThrowArgs} args - Arguments to find a Lobby
     * @example
     * // Get one Lobby
     * const lobby = await prisma.lobby.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LobbyFindFirstOrThrowArgs>(args?: SelectSubset<T, LobbyFindFirstOrThrowArgs<ExtArgs>>): Prisma__LobbyClient<$Result.GetResult<Prisma.$LobbyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Lobbies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LobbyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lobbies
     * const lobbies = await prisma.lobby.findMany()
     * 
     * // Get first 10 Lobbies
     * const lobbies = await prisma.lobby.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lobbyWithIdOnly = await prisma.lobby.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LobbyFindManyArgs>(args?: SelectSubset<T, LobbyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LobbyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Lobby.
     * @param {LobbyCreateArgs} args - Arguments to create a Lobby.
     * @example
     * // Create one Lobby
     * const Lobby = await prisma.lobby.create({
     *   data: {
     *     // ... data to create a Lobby
     *   }
     * })
     * 
     */
    create<T extends LobbyCreateArgs>(args: SelectSubset<T, LobbyCreateArgs<ExtArgs>>): Prisma__LobbyClient<$Result.GetResult<Prisma.$LobbyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Lobbies.
     * @param {LobbyCreateManyArgs} args - Arguments to create many Lobbies.
     * @example
     * // Create many Lobbies
     * const lobby = await prisma.lobby.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LobbyCreateManyArgs>(args?: SelectSubset<T, LobbyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lobbies and returns the data saved in the database.
     * @param {LobbyCreateManyAndReturnArgs} args - Arguments to create many Lobbies.
     * @example
     * // Create many Lobbies
     * const lobby = await prisma.lobby.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lobbies and only return the `id`
     * const lobbyWithIdOnly = await prisma.lobby.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LobbyCreateManyAndReturnArgs>(args?: SelectSubset<T, LobbyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LobbyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Lobby.
     * @param {LobbyDeleteArgs} args - Arguments to delete one Lobby.
     * @example
     * // Delete one Lobby
     * const Lobby = await prisma.lobby.delete({
     *   where: {
     *     // ... filter to delete one Lobby
     *   }
     * })
     * 
     */
    delete<T extends LobbyDeleteArgs>(args: SelectSubset<T, LobbyDeleteArgs<ExtArgs>>): Prisma__LobbyClient<$Result.GetResult<Prisma.$LobbyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Lobby.
     * @param {LobbyUpdateArgs} args - Arguments to update one Lobby.
     * @example
     * // Update one Lobby
     * const lobby = await prisma.lobby.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LobbyUpdateArgs>(args: SelectSubset<T, LobbyUpdateArgs<ExtArgs>>): Prisma__LobbyClient<$Result.GetResult<Prisma.$LobbyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Lobbies.
     * @param {LobbyDeleteManyArgs} args - Arguments to filter Lobbies to delete.
     * @example
     * // Delete a few Lobbies
     * const { count } = await prisma.lobby.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LobbyDeleteManyArgs>(args?: SelectSubset<T, LobbyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lobbies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LobbyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lobbies
     * const lobby = await prisma.lobby.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LobbyUpdateManyArgs>(args: SelectSubset<T, LobbyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Lobby.
     * @param {LobbyUpsertArgs} args - Arguments to update or create a Lobby.
     * @example
     * // Update or create a Lobby
     * const lobby = await prisma.lobby.upsert({
     *   create: {
     *     // ... data to create a Lobby
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lobby we want to update
     *   }
     * })
     */
    upsert<T extends LobbyUpsertArgs>(args: SelectSubset<T, LobbyUpsertArgs<ExtArgs>>): Prisma__LobbyClient<$Result.GetResult<Prisma.$LobbyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Lobbies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LobbyCountArgs} args - Arguments to filter Lobbies to count.
     * @example
     * // Count the number of Lobbies
     * const count = await prisma.lobby.count({
     *   where: {
     *     // ... the filter for the Lobbies we want to count
     *   }
     * })
    **/
    count<T extends LobbyCountArgs>(
      args?: Subset<T, LobbyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LobbyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lobby.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LobbyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LobbyAggregateArgs>(args: Subset<T, LobbyAggregateArgs>): Prisma.PrismaPromise<GetLobbyAggregateType<T>>

    /**
     * Group by Lobby.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LobbyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LobbyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LobbyGroupByArgs['orderBy'] }
        : { orderBy?: LobbyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LobbyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLobbyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lobby model
   */
  readonly fields: LobbyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lobby.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LobbyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    participants<T extends Lobby$participantsArgs<ExtArgs> = {}>(args?: Subset<T, Lobby$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LobbyParticipantPayload<ExtArgs>, T, "findMany"> | Null>
    teams<T extends Lobby$teamsArgs<ExtArgs> = {}>(args?: Subset<T, Lobby$teamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany"> | Null>
    matches<T extends Lobby$matchesArgs<ExtArgs> = {}>(args?: Subset<T, Lobby$matchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lobby model
   */ 
  interface LobbyFieldRefs {
    readonly id: FieldRef<"Lobby", 'String'>
    readonly guildId: FieldRef<"Lobby", 'String'>
    readonly channelId: FieldRef<"Lobby", 'String'>
    readonly messageId: FieldRef<"Lobby", 'String'>
    readonly name: FieldRef<"Lobby", 'String'>
    readonly slots: FieldRef<"Lobby", 'Int'>
    readonly mode: FieldRef<"Lobby", 'GameMode'>
    readonly state: FieldRef<"Lobby", 'LobbyState'>
    readonly createdBy: FieldRef<"Lobby", 'String'>
    readonly currentRound: FieldRef<"Lobby", 'Int'>
    readonly createdAt: FieldRef<"Lobby", 'DateTime'>
    readonly updatedAt: FieldRef<"Lobby", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Lobby findUnique
   */
  export type LobbyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lobby
     */
    select?: LobbySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyInclude<ExtArgs> | null
    /**
     * Filter, which Lobby to fetch.
     */
    where: LobbyWhereUniqueInput
  }

  /**
   * Lobby findUniqueOrThrow
   */
  export type LobbyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lobby
     */
    select?: LobbySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyInclude<ExtArgs> | null
    /**
     * Filter, which Lobby to fetch.
     */
    where: LobbyWhereUniqueInput
  }

  /**
   * Lobby findFirst
   */
  export type LobbyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lobby
     */
    select?: LobbySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyInclude<ExtArgs> | null
    /**
     * Filter, which Lobby to fetch.
     */
    where?: LobbyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lobbies to fetch.
     */
    orderBy?: LobbyOrderByWithRelationInput | LobbyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lobbies.
     */
    cursor?: LobbyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lobbies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lobbies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lobbies.
     */
    distinct?: LobbyScalarFieldEnum | LobbyScalarFieldEnum[]
  }

  /**
   * Lobby findFirstOrThrow
   */
  export type LobbyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lobby
     */
    select?: LobbySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyInclude<ExtArgs> | null
    /**
     * Filter, which Lobby to fetch.
     */
    where?: LobbyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lobbies to fetch.
     */
    orderBy?: LobbyOrderByWithRelationInput | LobbyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lobbies.
     */
    cursor?: LobbyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lobbies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lobbies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lobbies.
     */
    distinct?: LobbyScalarFieldEnum | LobbyScalarFieldEnum[]
  }

  /**
   * Lobby findMany
   */
  export type LobbyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lobby
     */
    select?: LobbySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyInclude<ExtArgs> | null
    /**
     * Filter, which Lobbies to fetch.
     */
    where?: LobbyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lobbies to fetch.
     */
    orderBy?: LobbyOrderByWithRelationInput | LobbyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lobbies.
     */
    cursor?: LobbyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lobbies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lobbies.
     */
    skip?: number
    distinct?: LobbyScalarFieldEnum | LobbyScalarFieldEnum[]
  }

  /**
   * Lobby create
   */
  export type LobbyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lobby
     */
    select?: LobbySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyInclude<ExtArgs> | null
    /**
     * The data needed to create a Lobby.
     */
    data: XOR<LobbyCreateInput, LobbyUncheckedCreateInput>
  }

  /**
   * Lobby createMany
   */
  export type LobbyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lobbies.
     */
    data: LobbyCreateManyInput | LobbyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lobby createManyAndReturn
   */
  export type LobbyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lobby
     */
    select?: LobbySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Lobbies.
     */
    data: LobbyCreateManyInput | LobbyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lobby update
   */
  export type LobbyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lobby
     */
    select?: LobbySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyInclude<ExtArgs> | null
    /**
     * The data needed to update a Lobby.
     */
    data: XOR<LobbyUpdateInput, LobbyUncheckedUpdateInput>
    /**
     * Choose, which Lobby to update.
     */
    where: LobbyWhereUniqueInput
  }

  /**
   * Lobby updateMany
   */
  export type LobbyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lobbies.
     */
    data: XOR<LobbyUpdateManyMutationInput, LobbyUncheckedUpdateManyInput>
    /**
     * Filter which Lobbies to update
     */
    where?: LobbyWhereInput
  }

  /**
   * Lobby upsert
   */
  export type LobbyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lobby
     */
    select?: LobbySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyInclude<ExtArgs> | null
    /**
     * The filter to search for the Lobby to update in case it exists.
     */
    where: LobbyWhereUniqueInput
    /**
     * In case the Lobby found by the `where` argument doesn't exist, create a new Lobby with this data.
     */
    create: XOR<LobbyCreateInput, LobbyUncheckedCreateInput>
    /**
     * In case the Lobby was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LobbyUpdateInput, LobbyUncheckedUpdateInput>
  }

  /**
   * Lobby delete
   */
  export type LobbyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lobby
     */
    select?: LobbySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyInclude<ExtArgs> | null
    /**
     * Filter which Lobby to delete.
     */
    where: LobbyWhereUniqueInput
  }

  /**
   * Lobby deleteMany
   */
  export type LobbyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lobbies to delete
     */
    where?: LobbyWhereInput
  }

  /**
   * Lobby.participants
   */
  export type Lobby$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LobbyParticipant
     */
    select?: LobbyParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyParticipantInclude<ExtArgs> | null
    where?: LobbyParticipantWhereInput
    orderBy?: LobbyParticipantOrderByWithRelationInput | LobbyParticipantOrderByWithRelationInput[]
    cursor?: LobbyParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LobbyParticipantScalarFieldEnum | LobbyParticipantScalarFieldEnum[]
  }

  /**
   * Lobby.teams
   */
  export type Lobby$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    cursor?: TeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Lobby.matches
   */
  export type Lobby$matchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Lobby without action
   */
  export type LobbyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lobby
     */
    select?: LobbySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyInclude<ExtArgs> | null
  }


  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamAvgAggregateOutputType = {
    number: number | null
  }

  export type TeamSumAggregateOutputType = {
    number: number | null
  }

  export type TeamMinAggregateOutputType = {
    id: string | null
    lobbyId: string | null
    number: number | null
    name: string | null
    roleId: string | null
    textChannelId: string | null
    voiceChannelId: string | null
  }

  export type TeamMaxAggregateOutputType = {
    id: string | null
    lobbyId: string | null
    number: number | null
    name: string | null
    roleId: string | null
    textChannelId: string | null
    voiceChannelId: string | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    lobbyId: number
    number: number
    name: number
    roleId: number
    textChannelId: number
    voiceChannelId: number
    _all: number
  }


  export type TeamAvgAggregateInputType = {
    number?: true
  }

  export type TeamSumAggregateInputType = {
    number?: true
  }

  export type TeamMinAggregateInputType = {
    id?: true
    lobbyId?: true
    number?: true
    name?: true
    roleId?: true
    textChannelId?: true
    voiceChannelId?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    lobbyId?: true
    number?: true
    name?: true
    roleId?: true
    textChannelId?: true
    voiceChannelId?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    lobbyId?: true
    number?: true
    name?: true
    roleId?: true
    textChannelId?: true
    voiceChannelId?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _avg?: TeamAvgAggregateInputType
    _sum?: TeamSumAggregateInputType
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: string
    lobbyId: string
    number: number
    name: string
    roleId: string | null
    textChannelId: string | null
    voiceChannelId: string | null
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lobbyId?: boolean
    number?: boolean
    name?: boolean
    roleId?: boolean
    textChannelId?: boolean
    voiceChannelId?: boolean
    lobby?: boolean | LobbyDefaultArgs<ExtArgs>
    blueMatches?: boolean | Team$blueMatchesArgs<ExtArgs>
    redMatches?: boolean | Team$redMatchesArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lobbyId?: boolean
    number?: boolean
    name?: boolean
    roleId?: boolean
    textChannelId?: boolean
    voiceChannelId?: boolean
    lobby?: boolean | LobbyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectScalar = {
    id?: boolean
    lobbyId?: boolean
    number?: boolean
    name?: boolean
    roleId?: boolean
    textChannelId?: boolean
    voiceChannelId?: boolean
  }

  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lobby?: boolean | LobbyDefaultArgs<ExtArgs>
    blueMatches?: boolean | Team$blueMatchesArgs<ExtArgs>
    redMatches?: boolean | Team$redMatchesArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lobby?: boolean | LobbyDefaultArgs<ExtArgs>
  }

  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      lobby: Prisma.$LobbyPayload<ExtArgs>
      blueMatches: Prisma.$MatchPayload<ExtArgs>[]
      redMatches: Prisma.$MatchPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      lobbyId: string
      number: number
      name: string
      roleId: string | null
      textChannelId: string | null
      voiceChannelId: string | null
    }, ExtArgs["result"]["team"]>
    composites: {}
  }

  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamFindUniqueArgs>(args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Team that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamFindFirstArgs>(args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamFindManyArgs>(args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
     */
    create<T extends TeamCreateArgs>(args: SelectSubset<T, TeamCreateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Teams.
     * @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamCreateManyArgs>(args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teams and returns the data saved in the database.
     * @param {TeamCreateManyAndReturnArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
     */
    delete<T extends TeamDeleteArgs>(args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamUpdateArgs>(args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamDeleteManyArgs>(args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamUpdateManyArgs>(args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
     */
    upsert<T extends TeamUpsertArgs>(args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lobby<T extends LobbyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LobbyDefaultArgs<ExtArgs>>): Prisma__LobbyClient<$Result.GetResult<Prisma.$LobbyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    blueMatches<T extends Team$blueMatchesArgs<ExtArgs> = {}>(args?: Subset<T, Team$blueMatchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany"> | Null>
    redMatches<T extends Team$redMatchesArgs<ExtArgs> = {}>(args?: Subset<T, Team$redMatchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Team model
   */ 
  interface TeamFieldRefs {
    readonly id: FieldRef<"Team", 'String'>
    readonly lobbyId: FieldRef<"Team", 'String'>
    readonly number: FieldRef<"Team", 'Int'>
    readonly name: FieldRef<"Team", 'String'>
    readonly roleId: FieldRef<"Team", 'String'>
    readonly textChannelId: FieldRef<"Team", 'String'>
    readonly voiceChannelId: FieldRef<"Team", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }

  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team createManyAndReturn
   */
  export type TeamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
  }

  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }

  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
  }

  /**
   * Team.blueMatches
   */
  export type Team$blueMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Team.redMatches
   */
  export type Team$redMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
  }


  /**
   * Model Match
   */

  export type AggregateMatch = {
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  export type MatchAvgAggregateOutputType = {
    round: number | null
    indexInRound: number | null
  }

  export type MatchSumAggregateOutputType = {
    round: number | null
    indexInRound: number | null
  }

  export type MatchMinAggregateOutputType = {
    id: string | null
    lobbyId: string | null
    round: number | null
    indexInRound: number | null
    blueTeamId: string | null
    redTeamId: string | null
    draftBlueUrl: string | null
    draftRedUrl: string | null
    specUrl: string | null
    state: $Enums.MatchState | null
    winnerTeamId: string | null
  }

  export type MatchMaxAggregateOutputType = {
    id: string | null
    lobbyId: string | null
    round: number | null
    indexInRound: number | null
    blueTeamId: string | null
    redTeamId: string | null
    draftBlueUrl: string | null
    draftRedUrl: string | null
    specUrl: string | null
    state: $Enums.MatchState | null
    winnerTeamId: string | null
  }

  export type MatchCountAggregateOutputType = {
    id: number
    lobbyId: number
    round: number
    indexInRound: number
    blueTeamId: number
    redTeamId: number
    draftBlueUrl: number
    draftRedUrl: number
    specUrl: number
    state: number
    winnerTeamId: number
    _all: number
  }


  export type MatchAvgAggregateInputType = {
    round?: true
    indexInRound?: true
  }

  export type MatchSumAggregateInputType = {
    round?: true
    indexInRound?: true
  }

  export type MatchMinAggregateInputType = {
    id?: true
    lobbyId?: true
    round?: true
    indexInRound?: true
    blueTeamId?: true
    redTeamId?: true
    draftBlueUrl?: true
    draftRedUrl?: true
    specUrl?: true
    state?: true
    winnerTeamId?: true
  }

  export type MatchMaxAggregateInputType = {
    id?: true
    lobbyId?: true
    round?: true
    indexInRound?: true
    blueTeamId?: true
    redTeamId?: true
    draftBlueUrl?: true
    draftRedUrl?: true
    specUrl?: true
    state?: true
    winnerTeamId?: true
  }

  export type MatchCountAggregateInputType = {
    id?: true
    lobbyId?: true
    round?: true
    indexInRound?: true
    blueTeamId?: true
    redTeamId?: true
    draftBlueUrl?: true
    draftRedUrl?: true
    specUrl?: true
    state?: true
    winnerTeamId?: true
    _all?: true
  }

  export type MatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Match to aggregate.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Matches
    **/
    _count?: true | MatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchMaxAggregateInputType
  }

  export type GetMatchAggregateType<T extends MatchAggregateArgs> = {
        [P in keyof T & keyof AggregateMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatch[P]>
      : GetScalarType<T[P], AggregateMatch[P]>
  }




  export type MatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithAggregationInput | MatchOrderByWithAggregationInput[]
    by: MatchScalarFieldEnum[] | MatchScalarFieldEnum
    having?: MatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchCountAggregateInputType | true
    _avg?: MatchAvgAggregateInputType
    _sum?: MatchSumAggregateInputType
    _min?: MatchMinAggregateInputType
    _max?: MatchMaxAggregateInputType
  }

  export type MatchGroupByOutputType = {
    id: string
    lobbyId: string
    round: number
    indexInRound: number
    blueTeamId: string
    redTeamId: string
    draftBlueUrl: string | null
    draftRedUrl: string | null
    specUrl: string | null
    state: $Enums.MatchState
    winnerTeamId: string | null
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  type GetMatchGroupByPayload<T extends MatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchGroupByOutputType[P]>
            : GetScalarType<T[P], MatchGroupByOutputType[P]>
        }
      >
    >


  export type MatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lobbyId?: boolean
    round?: boolean
    indexInRound?: boolean
    blueTeamId?: boolean
    redTeamId?: boolean
    draftBlueUrl?: boolean
    draftRedUrl?: boolean
    specUrl?: boolean
    state?: boolean
    winnerTeamId?: boolean
    lobby?: boolean | LobbyDefaultArgs<ExtArgs>
    blueTeam?: boolean | TeamDefaultArgs<ExtArgs>
    redTeam?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lobbyId?: boolean
    round?: boolean
    indexInRound?: boolean
    blueTeamId?: boolean
    redTeamId?: boolean
    draftBlueUrl?: boolean
    draftRedUrl?: boolean
    specUrl?: boolean
    state?: boolean
    winnerTeamId?: boolean
    lobby?: boolean | LobbyDefaultArgs<ExtArgs>
    blueTeam?: boolean | TeamDefaultArgs<ExtArgs>
    redTeam?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectScalar = {
    id?: boolean
    lobbyId?: boolean
    round?: boolean
    indexInRound?: boolean
    blueTeamId?: boolean
    redTeamId?: boolean
    draftBlueUrl?: boolean
    draftRedUrl?: boolean
    specUrl?: boolean
    state?: boolean
    winnerTeamId?: boolean
  }

  export type MatchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lobby?: boolean | LobbyDefaultArgs<ExtArgs>
    blueTeam?: boolean | TeamDefaultArgs<ExtArgs>
    redTeam?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type MatchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lobby?: boolean | LobbyDefaultArgs<ExtArgs>
    blueTeam?: boolean | TeamDefaultArgs<ExtArgs>
    redTeam?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $MatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Match"
    objects: {
      lobby: Prisma.$LobbyPayload<ExtArgs>
      blueTeam: Prisma.$TeamPayload<ExtArgs>
      redTeam: Prisma.$TeamPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      lobbyId: string
      round: number
      indexInRound: number
      blueTeamId: string
      redTeamId: string
      draftBlueUrl: string | null
      draftRedUrl: string | null
      specUrl: string | null
      state: $Enums.MatchState
      winnerTeamId: string | null
    }, ExtArgs["result"]["match"]>
    composites: {}
  }

  type MatchGetPayload<S extends boolean | null | undefined | MatchDefaultArgs> = $Result.GetResult<Prisma.$MatchPayload, S>

  type MatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MatchFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MatchCountAggregateInputType | true
    }

  export interface MatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Match'], meta: { name: 'Match' } }
    /**
     * Find zero or one Match that matches the filter.
     * @param {MatchFindUniqueArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchFindUniqueArgs>(args: SelectSubset<T, MatchFindUniqueArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Match that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MatchFindUniqueOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Match that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchFindFirstArgs>(args?: SelectSubset<T, MatchFindFirstArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Match that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Matches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Matches
     * const matches = await prisma.match.findMany()
     * 
     * // Get first 10 Matches
     * const matches = await prisma.match.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchWithIdOnly = await prisma.match.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MatchFindManyArgs>(args?: SelectSubset<T, MatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Match.
     * @param {MatchCreateArgs} args - Arguments to create a Match.
     * @example
     * // Create one Match
     * const Match = await prisma.match.create({
     *   data: {
     *     // ... data to create a Match
     *   }
     * })
     * 
     */
    create<T extends MatchCreateArgs>(args: SelectSubset<T, MatchCreateArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Matches.
     * @param {MatchCreateManyArgs} args - Arguments to create many Matches.
     * @example
     * // Create many Matches
     * const match = await prisma.match.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchCreateManyArgs>(args?: SelectSubset<T, MatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Matches and returns the data saved in the database.
     * @param {MatchCreateManyAndReturnArgs} args - Arguments to create many Matches.
     * @example
     * // Create many Matches
     * const match = await prisma.match.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Matches and only return the `id`
     * const matchWithIdOnly = await prisma.match.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MatchCreateManyAndReturnArgs>(args?: SelectSubset<T, MatchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Match.
     * @param {MatchDeleteArgs} args - Arguments to delete one Match.
     * @example
     * // Delete one Match
     * const Match = await prisma.match.delete({
     *   where: {
     *     // ... filter to delete one Match
     *   }
     * })
     * 
     */
    delete<T extends MatchDeleteArgs>(args: SelectSubset<T, MatchDeleteArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Match.
     * @param {MatchUpdateArgs} args - Arguments to update one Match.
     * @example
     * // Update one Match
     * const match = await prisma.match.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchUpdateArgs>(args: SelectSubset<T, MatchUpdateArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Matches.
     * @param {MatchDeleteManyArgs} args - Arguments to filter Matches to delete.
     * @example
     * // Delete a few Matches
     * const { count } = await prisma.match.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchDeleteManyArgs>(args?: SelectSubset<T, MatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchUpdateManyArgs>(args: SelectSubset<T, MatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Match.
     * @param {MatchUpsertArgs} args - Arguments to update or create a Match.
     * @example
     * // Update or create a Match
     * const match = await prisma.match.upsert({
     *   create: {
     *     // ... data to create a Match
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Match we want to update
     *   }
     * })
     */
    upsert<T extends MatchUpsertArgs>(args: SelectSubset<T, MatchUpsertArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchCountArgs} args - Arguments to filter Matches to count.
     * @example
     * // Count the number of Matches
     * const count = await prisma.match.count({
     *   where: {
     *     // ... the filter for the Matches we want to count
     *   }
     * })
    **/
    count<T extends MatchCountArgs>(
      args?: Subset<T, MatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchAggregateArgs>(args: Subset<T, MatchAggregateArgs>): Prisma.PrismaPromise<GetMatchAggregateType<T>>

    /**
     * Group by Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchGroupByArgs['orderBy'] }
        : { orderBy?: MatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Match model
   */
  readonly fields: MatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Match.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lobby<T extends LobbyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LobbyDefaultArgs<ExtArgs>>): Prisma__LobbyClient<$Result.GetResult<Prisma.$LobbyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    blueTeam<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    redTeam<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Match model
   */ 
  interface MatchFieldRefs {
    readonly id: FieldRef<"Match", 'String'>
    readonly lobbyId: FieldRef<"Match", 'String'>
    readonly round: FieldRef<"Match", 'Int'>
    readonly indexInRound: FieldRef<"Match", 'Int'>
    readonly blueTeamId: FieldRef<"Match", 'String'>
    readonly redTeamId: FieldRef<"Match", 'String'>
    readonly draftBlueUrl: FieldRef<"Match", 'String'>
    readonly draftRedUrl: FieldRef<"Match", 'String'>
    readonly specUrl: FieldRef<"Match", 'String'>
    readonly state: FieldRef<"Match", 'MatchState'>
    readonly winnerTeamId: FieldRef<"Match", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Match findUnique
   */
  export type MatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findUniqueOrThrow
   */
  export type MatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findFirst
   */
  export type MatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match findFirstOrThrow
   */
  export type MatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match findMany
   */
  export type MatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Matches to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match create
   */
  export type MatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The data needed to create a Match.
     */
    data: XOR<MatchCreateInput, MatchUncheckedCreateInput>
  }

  /**
   * Match createMany
   */
  export type MatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Matches.
     */
    data: MatchCreateManyInput | MatchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Match createManyAndReturn
   */
  export type MatchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Matches.
     */
    data: MatchCreateManyInput | MatchCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Match update
   */
  export type MatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The data needed to update a Match.
     */
    data: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
    /**
     * Choose, which Match to update.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match updateMany
   */
  export type MatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Matches.
     */
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyInput>
    /**
     * Filter which Matches to update
     */
    where?: MatchWhereInput
  }

  /**
   * Match upsert
   */
  export type MatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The filter to search for the Match to update in case it exists.
     */
    where: MatchWhereUniqueInput
    /**
     * In case the Match found by the `where` argument doesn't exist, create a new Match with this data.
     */
    create: XOR<MatchCreateInput, MatchUncheckedCreateInput>
    /**
     * In case the Match was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
  }

  /**
   * Match delete
   */
  export type MatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter which Match to delete.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match deleteMany
   */
  export type MatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Matches to delete
     */
    where?: MatchWhereInput
  }

  /**
   * Match without action
   */
  export type MatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
  }


  /**
   * Model UserProfile
   */

  export type AggregateUserProfile = {
    _count: UserProfileCountAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  export type UserProfileMinAggregateOutputType = {
    id: string | null
    discordUserId: string | null
    summonerName: string | null
    opggUrl: string | null
    dpmUrl: string | null
    region: $Enums.LoLRegion | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserProfileMaxAggregateOutputType = {
    id: string | null
    discordUserId: string | null
    summonerName: string | null
    opggUrl: string | null
    dpmUrl: string | null
    region: $Enums.LoLRegion | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserProfileCountAggregateOutputType = {
    id: number
    discordUserId: number
    summonerName: number
    preferredRoles: number
    opggUrl: number
    dpmUrl: number
    region: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserProfileMinAggregateInputType = {
    id?: true
    discordUserId?: true
    summonerName?: true
    opggUrl?: true
    dpmUrl?: true
    region?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserProfileMaxAggregateInputType = {
    id?: true
    discordUserId?: true
    summonerName?: true
    opggUrl?: true
    dpmUrl?: true
    region?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserProfileCountAggregateInputType = {
    id?: true
    discordUserId?: true
    summonerName?: true
    preferredRoles?: true
    opggUrl?: true
    dpmUrl?: true
    region?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfile to aggregate.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserProfiles
    **/
    _count?: true | UserProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProfileMaxAggregateInputType
  }

  export type GetUserProfileAggregateType<T extends UserProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProfile[P]>
      : GetScalarType<T[P], AggregateUserProfile[P]>
  }




  export type UserProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProfileWhereInput
    orderBy?: UserProfileOrderByWithAggregationInput | UserProfileOrderByWithAggregationInput[]
    by: UserProfileScalarFieldEnum[] | UserProfileScalarFieldEnum
    having?: UserProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProfileCountAggregateInputType | true
    _min?: UserProfileMinAggregateInputType
    _max?: UserProfileMaxAggregateInputType
  }

  export type UserProfileGroupByOutputType = {
    id: string
    discordUserId: string
    summonerName: string | null
    preferredRoles: $Enums.RoleName[]
    opggUrl: string | null
    dpmUrl: string | null
    region: $Enums.LoLRegion | null
    createdAt: Date
    updatedAt: Date
    _count: UserProfileCountAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  type GetUserProfileGroupByPayload<T extends UserProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
            : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
        }
      >
    >


  export type UserProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    discordUserId?: boolean
    summonerName?: boolean
    preferredRoles?: boolean
    opggUrl?: boolean
    dpmUrl?: boolean
    region?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    participations?: boolean | UserProfile$participationsArgs<ExtArgs>
    stats?: boolean | UserProfile$statsArgs<ExtArgs>
    _count?: boolean | UserProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    discordUserId?: boolean
    summonerName?: boolean
    preferredRoles?: boolean
    opggUrl?: boolean
    dpmUrl?: boolean
    region?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectScalar = {
    id?: boolean
    discordUserId?: boolean
    summonerName?: boolean
    preferredRoles?: boolean
    opggUrl?: boolean
    dpmUrl?: boolean
    region?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participations?: boolean | UserProfile$participationsArgs<ExtArgs>
    stats?: boolean | UserProfile$statsArgs<ExtArgs>
    _count?: boolean | UserProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserProfile"
    objects: {
      participations: Prisma.$LobbyParticipantPayload<ExtArgs>[]
      stats: Prisma.$PlayerStatsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      discordUserId: string
      summonerName: string | null
      preferredRoles: $Enums.RoleName[]
      opggUrl: string | null
      dpmUrl: string | null
      region: $Enums.LoLRegion | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userProfile"]>
    composites: {}
  }

  type UserProfileGetPayload<S extends boolean | null | undefined | UserProfileDefaultArgs> = $Result.GetResult<Prisma.$UserProfilePayload, S>

  type UserProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserProfileCountAggregateInputType | true
    }

  export interface UserProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserProfile'], meta: { name: 'UserProfile' } }
    /**
     * Find zero or one UserProfile that matches the filter.
     * @param {UserProfileFindUniqueArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserProfileFindUniqueArgs>(args: SelectSubset<T, UserProfileFindUniqueArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserProfile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserProfileFindUniqueOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, UserProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserProfileFindFirstArgs>(args?: SelectSubset<T, UserProfileFindFirstArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, UserProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProfiles
     * const userProfiles = await prisma.userProfile.findMany()
     * 
     * // Get first 10 UserProfiles
     * const userProfiles = await prisma.userProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserProfileFindManyArgs>(args?: SelectSubset<T, UserProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserProfile.
     * @param {UserProfileCreateArgs} args - Arguments to create a UserProfile.
     * @example
     * // Create one UserProfile
     * const UserProfile = await prisma.userProfile.create({
     *   data: {
     *     // ... data to create a UserProfile
     *   }
     * })
     * 
     */
    create<T extends UserProfileCreateArgs>(args: SelectSubset<T, UserProfileCreateArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserProfiles.
     * @param {UserProfileCreateManyArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserProfileCreateManyArgs>(args?: SelectSubset<T, UserProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserProfiles and returns the data saved in the database.
     * @param {UserProfileCreateManyAndReturnArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserProfiles and only return the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, UserProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserProfile.
     * @param {UserProfileDeleteArgs} args - Arguments to delete one UserProfile.
     * @example
     * // Delete one UserProfile
     * const UserProfile = await prisma.userProfile.delete({
     *   where: {
     *     // ... filter to delete one UserProfile
     *   }
     * })
     * 
     */
    delete<T extends UserProfileDeleteArgs>(args: SelectSubset<T, UserProfileDeleteArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserProfile.
     * @param {UserProfileUpdateArgs} args - Arguments to update one UserProfile.
     * @example
     * // Update one UserProfile
     * const userProfile = await prisma.userProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserProfileUpdateArgs>(args: SelectSubset<T, UserProfileUpdateArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserProfiles.
     * @param {UserProfileDeleteManyArgs} args - Arguments to filter UserProfiles to delete.
     * @example
     * // Delete a few UserProfiles
     * const { count } = await prisma.userProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserProfileDeleteManyArgs>(args?: SelectSubset<T, UserProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProfiles
     * const userProfile = await prisma.userProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserProfileUpdateManyArgs>(args: SelectSubset<T, UserProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserProfile.
     * @param {UserProfileUpsertArgs} args - Arguments to update or create a UserProfile.
     * @example
     * // Update or create a UserProfile
     * const userProfile = await prisma.userProfile.upsert({
     *   create: {
     *     // ... data to create a UserProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProfile we want to update
     *   }
     * })
     */
    upsert<T extends UserProfileUpsertArgs>(args: SelectSubset<T, UserProfileUpsertArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileCountArgs} args - Arguments to filter UserProfiles to count.
     * @example
     * // Count the number of UserProfiles
     * const count = await prisma.userProfile.count({
     *   where: {
     *     // ... the filter for the UserProfiles we want to count
     *   }
     * })
    **/
    count<T extends UserProfileCountArgs>(
      args?: Subset<T, UserProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProfileAggregateArgs>(args: Subset<T, UserProfileAggregateArgs>): Prisma.PrismaPromise<GetUserProfileAggregateType<T>>

    /**
     * Group by UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProfileGroupByArgs['orderBy'] }
        : { orderBy?: UserProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserProfile model
   */
  readonly fields: UserProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    participations<T extends UserProfile$participationsArgs<ExtArgs> = {}>(args?: Subset<T, UserProfile$participationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LobbyParticipantPayload<ExtArgs>, T, "findMany"> | Null>
    stats<T extends UserProfile$statsArgs<ExtArgs> = {}>(args?: Subset<T, UserProfile$statsArgs<ExtArgs>>): Prisma__PlayerStatsClient<$Result.GetResult<Prisma.$PlayerStatsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserProfile model
   */ 
  interface UserProfileFieldRefs {
    readonly id: FieldRef<"UserProfile", 'String'>
    readonly discordUserId: FieldRef<"UserProfile", 'String'>
    readonly summonerName: FieldRef<"UserProfile", 'String'>
    readonly preferredRoles: FieldRef<"UserProfile", 'RoleName[]'>
    readonly opggUrl: FieldRef<"UserProfile", 'String'>
    readonly dpmUrl: FieldRef<"UserProfile", 'String'>
    readonly region: FieldRef<"UserProfile", 'LoLRegion'>
    readonly createdAt: FieldRef<"UserProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"UserProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserProfile findUnique
   */
  export type UserProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile findUniqueOrThrow
   */
  export type UserProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile findFirst
   */
  export type UserProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile findFirstOrThrow
   */
  export type UserProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile findMany
   */
  export type UserProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfiles to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile create
   */
  export type UserProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a UserProfile.
     */
    data: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
  }

  /**
   * UserProfile createMany
   */
  export type UserProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserProfiles.
     */
    data: UserProfileCreateManyInput | UserProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserProfile createManyAndReturn
   */
  export type UserProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserProfiles.
     */
    data: UserProfileCreateManyInput | UserProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserProfile update
   */
  export type UserProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a UserProfile.
     */
    data: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
    /**
     * Choose, which UserProfile to update.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile updateMany
   */
  export type UserProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserProfiles.
     */
    data: XOR<UserProfileUpdateManyMutationInput, UserProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserProfiles to update
     */
    where?: UserProfileWhereInput
  }

  /**
   * UserProfile upsert
   */
  export type UserProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the UserProfile to update in case it exists.
     */
    where: UserProfileWhereUniqueInput
    /**
     * In case the UserProfile found by the `where` argument doesn't exist, create a new UserProfile with this data.
     */
    create: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
    /**
     * In case the UserProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
  }

  /**
   * UserProfile delete
   */
  export type UserProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter which UserProfile to delete.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile deleteMany
   */
  export type UserProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfiles to delete
     */
    where?: UserProfileWhereInput
  }

  /**
   * UserProfile.participations
   */
  export type UserProfile$participationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LobbyParticipant
     */
    select?: LobbyParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyParticipantInclude<ExtArgs> | null
    where?: LobbyParticipantWhereInput
    orderBy?: LobbyParticipantOrderByWithRelationInput | LobbyParticipantOrderByWithRelationInput[]
    cursor?: LobbyParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LobbyParticipantScalarFieldEnum | LobbyParticipantScalarFieldEnum[]
  }

  /**
   * UserProfile.stats
   */
  export type UserProfile$statsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStats
     */
    select?: PlayerStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatsInclude<ExtArgs> | null
    where?: PlayerStatsWhereInput
  }

  /**
   * UserProfile without action
   */
  export type UserProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
  }


  /**
   * Model LobbyParticipant
   */

  export type AggregateLobbyParticipant = {
    _count: LobbyParticipantCountAggregateOutputType | null
    _avg: LobbyParticipantAvgAggregateOutputType | null
    _sum: LobbyParticipantSumAggregateOutputType | null
    _min: LobbyParticipantMinAggregateOutputType | null
    _max: LobbyParticipantMaxAggregateOutputType | null
  }

  export type LobbyParticipantAvgAggregateOutputType = {
    teamNumber: number | null
  }

  export type LobbyParticipantSumAggregateOutputType = {
    teamNumber: number | null
  }

  export type LobbyParticipantMinAggregateOutputType = {
    id: string | null
    lobbyId: string | null
    userId: string | null
    isCaptain: boolean | null
    isSub: boolean | null
    selectedRole: $Enums.RoleName | null
    teamNumber: number | null
  }

  export type LobbyParticipantMaxAggregateOutputType = {
    id: string | null
    lobbyId: string | null
    userId: string | null
    isCaptain: boolean | null
    isSub: boolean | null
    selectedRole: $Enums.RoleName | null
    teamNumber: number | null
  }

  export type LobbyParticipantCountAggregateOutputType = {
    id: number
    lobbyId: number
    userId: number
    isCaptain: number
    isSub: number
    selectedRole: number
    teamNumber: number
    _all: number
  }


  export type LobbyParticipantAvgAggregateInputType = {
    teamNumber?: true
  }

  export type LobbyParticipantSumAggregateInputType = {
    teamNumber?: true
  }

  export type LobbyParticipantMinAggregateInputType = {
    id?: true
    lobbyId?: true
    userId?: true
    isCaptain?: true
    isSub?: true
    selectedRole?: true
    teamNumber?: true
  }

  export type LobbyParticipantMaxAggregateInputType = {
    id?: true
    lobbyId?: true
    userId?: true
    isCaptain?: true
    isSub?: true
    selectedRole?: true
    teamNumber?: true
  }

  export type LobbyParticipantCountAggregateInputType = {
    id?: true
    lobbyId?: true
    userId?: true
    isCaptain?: true
    isSub?: true
    selectedRole?: true
    teamNumber?: true
    _all?: true
  }

  export type LobbyParticipantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LobbyParticipant to aggregate.
     */
    where?: LobbyParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LobbyParticipants to fetch.
     */
    orderBy?: LobbyParticipantOrderByWithRelationInput | LobbyParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LobbyParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LobbyParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LobbyParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LobbyParticipants
    **/
    _count?: true | LobbyParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LobbyParticipantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LobbyParticipantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LobbyParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LobbyParticipantMaxAggregateInputType
  }

  export type GetLobbyParticipantAggregateType<T extends LobbyParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateLobbyParticipant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLobbyParticipant[P]>
      : GetScalarType<T[P], AggregateLobbyParticipant[P]>
  }




  export type LobbyParticipantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LobbyParticipantWhereInput
    orderBy?: LobbyParticipantOrderByWithAggregationInput | LobbyParticipantOrderByWithAggregationInput[]
    by: LobbyParticipantScalarFieldEnum[] | LobbyParticipantScalarFieldEnum
    having?: LobbyParticipantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LobbyParticipantCountAggregateInputType | true
    _avg?: LobbyParticipantAvgAggregateInputType
    _sum?: LobbyParticipantSumAggregateInputType
    _min?: LobbyParticipantMinAggregateInputType
    _max?: LobbyParticipantMaxAggregateInputType
  }

  export type LobbyParticipantGroupByOutputType = {
    id: string
    lobbyId: string
    userId: string
    isCaptain: boolean
    isSub: boolean
    selectedRole: $Enums.RoleName | null
    teamNumber: number | null
    _count: LobbyParticipantCountAggregateOutputType | null
    _avg: LobbyParticipantAvgAggregateOutputType | null
    _sum: LobbyParticipantSumAggregateOutputType | null
    _min: LobbyParticipantMinAggregateOutputType | null
    _max: LobbyParticipantMaxAggregateOutputType | null
  }

  type GetLobbyParticipantGroupByPayload<T extends LobbyParticipantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LobbyParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LobbyParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LobbyParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], LobbyParticipantGroupByOutputType[P]>
        }
      >
    >


  export type LobbyParticipantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lobbyId?: boolean
    userId?: boolean
    isCaptain?: boolean
    isSub?: boolean
    selectedRole?: boolean
    teamNumber?: boolean
    lobby?: boolean | LobbyDefaultArgs<ExtArgs>
    profile?: boolean | UserProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lobbyParticipant"]>

  export type LobbyParticipantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lobbyId?: boolean
    userId?: boolean
    isCaptain?: boolean
    isSub?: boolean
    selectedRole?: boolean
    teamNumber?: boolean
    lobby?: boolean | LobbyDefaultArgs<ExtArgs>
    profile?: boolean | UserProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lobbyParticipant"]>

  export type LobbyParticipantSelectScalar = {
    id?: boolean
    lobbyId?: boolean
    userId?: boolean
    isCaptain?: boolean
    isSub?: boolean
    selectedRole?: boolean
    teamNumber?: boolean
  }

  export type LobbyParticipantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lobby?: boolean | LobbyDefaultArgs<ExtArgs>
    profile?: boolean | UserProfileDefaultArgs<ExtArgs>
  }
  export type LobbyParticipantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lobby?: boolean | LobbyDefaultArgs<ExtArgs>
    profile?: boolean | UserProfileDefaultArgs<ExtArgs>
  }

  export type $LobbyParticipantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LobbyParticipant"
    objects: {
      lobby: Prisma.$LobbyPayload<ExtArgs>
      profile: Prisma.$UserProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      lobbyId: string
      userId: string
      isCaptain: boolean
      isSub: boolean
      selectedRole: $Enums.RoleName | null
      teamNumber: number | null
    }, ExtArgs["result"]["lobbyParticipant"]>
    composites: {}
  }

  type LobbyParticipantGetPayload<S extends boolean | null | undefined | LobbyParticipantDefaultArgs> = $Result.GetResult<Prisma.$LobbyParticipantPayload, S>

  type LobbyParticipantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LobbyParticipantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LobbyParticipantCountAggregateInputType | true
    }

  export interface LobbyParticipantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LobbyParticipant'], meta: { name: 'LobbyParticipant' } }
    /**
     * Find zero or one LobbyParticipant that matches the filter.
     * @param {LobbyParticipantFindUniqueArgs} args - Arguments to find a LobbyParticipant
     * @example
     * // Get one LobbyParticipant
     * const lobbyParticipant = await prisma.lobbyParticipant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LobbyParticipantFindUniqueArgs>(args: SelectSubset<T, LobbyParticipantFindUniqueArgs<ExtArgs>>): Prisma__LobbyParticipantClient<$Result.GetResult<Prisma.$LobbyParticipantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LobbyParticipant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LobbyParticipantFindUniqueOrThrowArgs} args - Arguments to find a LobbyParticipant
     * @example
     * // Get one LobbyParticipant
     * const lobbyParticipant = await prisma.lobbyParticipant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LobbyParticipantFindUniqueOrThrowArgs>(args: SelectSubset<T, LobbyParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LobbyParticipantClient<$Result.GetResult<Prisma.$LobbyParticipantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LobbyParticipant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LobbyParticipantFindFirstArgs} args - Arguments to find a LobbyParticipant
     * @example
     * // Get one LobbyParticipant
     * const lobbyParticipant = await prisma.lobbyParticipant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LobbyParticipantFindFirstArgs>(args?: SelectSubset<T, LobbyParticipantFindFirstArgs<ExtArgs>>): Prisma__LobbyParticipantClient<$Result.GetResult<Prisma.$LobbyParticipantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LobbyParticipant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LobbyParticipantFindFirstOrThrowArgs} args - Arguments to find a LobbyParticipant
     * @example
     * // Get one LobbyParticipant
     * const lobbyParticipant = await prisma.lobbyParticipant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LobbyParticipantFindFirstOrThrowArgs>(args?: SelectSubset<T, LobbyParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma__LobbyParticipantClient<$Result.GetResult<Prisma.$LobbyParticipantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LobbyParticipants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LobbyParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LobbyParticipants
     * const lobbyParticipants = await prisma.lobbyParticipant.findMany()
     * 
     * // Get first 10 LobbyParticipants
     * const lobbyParticipants = await prisma.lobbyParticipant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lobbyParticipantWithIdOnly = await prisma.lobbyParticipant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LobbyParticipantFindManyArgs>(args?: SelectSubset<T, LobbyParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LobbyParticipantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LobbyParticipant.
     * @param {LobbyParticipantCreateArgs} args - Arguments to create a LobbyParticipant.
     * @example
     * // Create one LobbyParticipant
     * const LobbyParticipant = await prisma.lobbyParticipant.create({
     *   data: {
     *     // ... data to create a LobbyParticipant
     *   }
     * })
     * 
     */
    create<T extends LobbyParticipantCreateArgs>(args: SelectSubset<T, LobbyParticipantCreateArgs<ExtArgs>>): Prisma__LobbyParticipantClient<$Result.GetResult<Prisma.$LobbyParticipantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LobbyParticipants.
     * @param {LobbyParticipantCreateManyArgs} args - Arguments to create many LobbyParticipants.
     * @example
     * // Create many LobbyParticipants
     * const lobbyParticipant = await prisma.lobbyParticipant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LobbyParticipantCreateManyArgs>(args?: SelectSubset<T, LobbyParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LobbyParticipants and returns the data saved in the database.
     * @param {LobbyParticipantCreateManyAndReturnArgs} args - Arguments to create many LobbyParticipants.
     * @example
     * // Create many LobbyParticipants
     * const lobbyParticipant = await prisma.lobbyParticipant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LobbyParticipants and only return the `id`
     * const lobbyParticipantWithIdOnly = await prisma.lobbyParticipant.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LobbyParticipantCreateManyAndReturnArgs>(args?: SelectSubset<T, LobbyParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LobbyParticipantPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LobbyParticipant.
     * @param {LobbyParticipantDeleteArgs} args - Arguments to delete one LobbyParticipant.
     * @example
     * // Delete one LobbyParticipant
     * const LobbyParticipant = await prisma.lobbyParticipant.delete({
     *   where: {
     *     // ... filter to delete one LobbyParticipant
     *   }
     * })
     * 
     */
    delete<T extends LobbyParticipantDeleteArgs>(args: SelectSubset<T, LobbyParticipantDeleteArgs<ExtArgs>>): Prisma__LobbyParticipantClient<$Result.GetResult<Prisma.$LobbyParticipantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LobbyParticipant.
     * @param {LobbyParticipantUpdateArgs} args - Arguments to update one LobbyParticipant.
     * @example
     * // Update one LobbyParticipant
     * const lobbyParticipant = await prisma.lobbyParticipant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LobbyParticipantUpdateArgs>(args: SelectSubset<T, LobbyParticipantUpdateArgs<ExtArgs>>): Prisma__LobbyParticipantClient<$Result.GetResult<Prisma.$LobbyParticipantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LobbyParticipants.
     * @param {LobbyParticipantDeleteManyArgs} args - Arguments to filter LobbyParticipants to delete.
     * @example
     * // Delete a few LobbyParticipants
     * const { count } = await prisma.lobbyParticipant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LobbyParticipantDeleteManyArgs>(args?: SelectSubset<T, LobbyParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LobbyParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LobbyParticipantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LobbyParticipants
     * const lobbyParticipant = await prisma.lobbyParticipant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LobbyParticipantUpdateManyArgs>(args: SelectSubset<T, LobbyParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LobbyParticipant.
     * @param {LobbyParticipantUpsertArgs} args - Arguments to update or create a LobbyParticipant.
     * @example
     * // Update or create a LobbyParticipant
     * const lobbyParticipant = await prisma.lobbyParticipant.upsert({
     *   create: {
     *     // ... data to create a LobbyParticipant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LobbyParticipant we want to update
     *   }
     * })
     */
    upsert<T extends LobbyParticipantUpsertArgs>(args: SelectSubset<T, LobbyParticipantUpsertArgs<ExtArgs>>): Prisma__LobbyParticipantClient<$Result.GetResult<Prisma.$LobbyParticipantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LobbyParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LobbyParticipantCountArgs} args - Arguments to filter LobbyParticipants to count.
     * @example
     * // Count the number of LobbyParticipants
     * const count = await prisma.lobbyParticipant.count({
     *   where: {
     *     // ... the filter for the LobbyParticipants we want to count
     *   }
     * })
    **/
    count<T extends LobbyParticipantCountArgs>(
      args?: Subset<T, LobbyParticipantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LobbyParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LobbyParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LobbyParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LobbyParticipantAggregateArgs>(args: Subset<T, LobbyParticipantAggregateArgs>): Prisma.PrismaPromise<GetLobbyParticipantAggregateType<T>>

    /**
     * Group by LobbyParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LobbyParticipantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LobbyParticipantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LobbyParticipantGroupByArgs['orderBy'] }
        : { orderBy?: LobbyParticipantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LobbyParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLobbyParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LobbyParticipant model
   */
  readonly fields: LobbyParticipantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LobbyParticipant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LobbyParticipantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lobby<T extends LobbyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LobbyDefaultArgs<ExtArgs>>): Prisma__LobbyClient<$Result.GetResult<Prisma.$LobbyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    profile<T extends UserProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserProfileDefaultArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LobbyParticipant model
   */ 
  interface LobbyParticipantFieldRefs {
    readonly id: FieldRef<"LobbyParticipant", 'String'>
    readonly lobbyId: FieldRef<"LobbyParticipant", 'String'>
    readonly userId: FieldRef<"LobbyParticipant", 'String'>
    readonly isCaptain: FieldRef<"LobbyParticipant", 'Boolean'>
    readonly isSub: FieldRef<"LobbyParticipant", 'Boolean'>
    readonly selectedRole: FieldRef<"LobbyParticipant", 'RoleName'>
    readonly teamNumber: FieldRef<"LobbyParticipant", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * LobbyParticipant findUnique
   */
  export type LobbyParticipantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LobbyParticipant
     */
    select?: LobbyParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyParticipantInclude<ExtArgs> | null
    /**
     * Filter, which LobbyParticipant to fetch.
     */
    where: LobbyParticipantWhereUniqueInput
  }

  /**
   * LobbyParticipant findUniqueOrThrow
   */
  export type LobbyParticipantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LobbyParticipant
     */
    select?: LobbyParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyParticipantInclude<ExtArgs> | null
    /**
     * Filter, which LobbyParticipant to fetch.
     */
    where: LobbyParticipantWhereUniqueInput
  }

  /**
   * LobbyParticipant findFirst
   */
  export type LobbyParticipantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LobbyParticipant
     */
    select?: LobbyParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyParticipantInclude<ExtArgs> | null
    /**
     * Filter, which LobbyParticipant to fetch.
     */
    where?: LobbyParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LobbyParticipants to fetch.
     */
    orderBy?: LobbyParticipantOrderByWithRelationInput | LobbyParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LobbyParticipants.
     */
    cursor?: LobbyParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LobbyParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LobbyParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LobbyParticipants.
     */
    distinct?: LobbyParticipantScalarFieldEnum | LobbyParticipantScalarFieldEnum[]
  }

  /**
   * LobbyParticipant findFirstOrThrow
   */
  export type LobbyParticipantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LobbyParticipant
     */
    select?: LobbyParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyParticipantInclude<ExtArgs> | null
    /**
     * Filter, which LobbyParticipant to fetch.
     */
    where?: LobbyParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LobbyParticipants to fetch.
     */
    orderBy?: LobbyParticipantOrderByWithRelationInput | LobbyParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LobbyParticipants.
     */
    cursor?: LobbyParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LobbyParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LobbyParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LobbyParticipants.
     */
    distinct?: LobbyParticipantScalarFieldEnum | LobbyParticipantScalarFieldEnum[]
  }

  /**
   * LobbyParticipant findMany
   */
  export type LobbyParticipantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LobbyParticipant
     */
    select?: LobbyParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyParticipantInclude<ExtArgs> | null
    /**
     * Filter, which LobbyParticipants to fetch.
     */
    where?: LobbyParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LobbyParticipants to fetch.
     */
    orderBy?: LobbyParticipantOrderByWithRelationInput | LobbyParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LobbyParticipants.
     */
    cursor?: LobbyParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LobbyParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LobbyParticipants.
     */
    skip?: number
    distinct?: LobbyParticipantScalarFieldEnum | LobbyParticipantScalarFieldEnum[]
  }

  /**
   * LobbyParticipant create
   */
  export type LobbyParticipantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LobbyParticipant
     */
    select?: LobbyParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyParticipantInclude<ExtArgs> | null
    /**
     * The data needed to create a LobbyParticipant.
     */
    data: XOR<LobbyParticipantCreateInput, LobbyParticipantUncheckedCreateInput>
  }

  /**
   * LobbyParticipant createMany
   */
  export type LobbyParticipantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LobbyParticipants.
     */
    data: LobbyParticipantCreateManyInput | LobbyParticipantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LobbyParticipant createManyAndReturn
   */
  export type LobbyParticipantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LobbyParticipant
     */
    select?: LobbyParticipantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LobbyParticipants.
     */
    data: LobbyParticipantCreateManyInput | LobbyParticipantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyParticipantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LobbyParticipant update
   */
  export type LobbyParticipantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LobbyParticipant
     */
    select?: LobbyParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyParticipantInclude<ExtArgs> | null
    /**
     * The data needed to update a LobbyParticipant.
     */
    data: XOR<LobbyParticipantUpdateInput, LobbyParticipantUncheckedUpdateInput>
    /**
     * Choose, which LobbyParticipant to update.
     */
    where: LobbyParticipantWhereUniqueInput
  }

  /**
   * LobbyParticipant updateMany
   */
  export type LobbyParticipantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LobbyParticipants.
     */
    data: XOR<LobbyParticipantUpdateManyMutationInput, LobbyParticipantUncheckedUpdateManyInput>
    /**
     * Filter which LobbyParticipants to update
     */
    where?: LobbyParticipantWhereInput
  }

  /**
   * LobbyParticipant upsert
   */
  export type LobbyParticipantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LobbyParticipant
     */
    select?: LobbyParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyParticipantInclude<ExtArgs> | null
    /**
     * The filter to search for the LobbyParticipant to update in case it exists.
     */
    where: LobbyParticipantWhereUniqueInput
    /**
     * In case the LobbyParticipant found by the `where` argument doesn't exist, create a new LobbyParticipant with this data.
     */
    create: XOR<LobbyParticipantCreateInput, LobbyParticipantUncheckedCreateInput>
    /**
     * In case the LobbyParticipant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LobbyParticipantUpdateInput, LobbyParticipantUncheckedUpdateInput>
  }

  /**
   * LobbyParticipant delete
   */
  export type LobbyParticipantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LobbyParticipant
     */
    select?: LobbyParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyParticipantInclude<ExtArgs> | null
    /**
     * Filter which LobbyParticipant to delete.
     */
    where: LobbyParticipantWhereUniqueInput
  }

  /**
   * LobbyParticipant deleteMany
   */
  export type LobbyParticipantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LobbyParticipants to delete
     */
    where?: LobbyParticipantWhereInput
  }

  /**
   * LobbyParticipant without action
   */
  export type LobbyParticipantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LobbyParticipant
     */
    select?: LobbyParticipantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LobbyParticipantInclude<ExtArgs> | null
  }


  /**
   * Model PlayerStats
   */

  export type AggregatePlayerStats = {
    _count: PlayerStatsCountAggregateOutputType | null
    _avg: PlayerStatsAvgAggregateOutputType | null
    _sum: PlayerStatsSumAggregateOutputType | null
    _min: PlayerStatsMinAggregateOutputType | null
    _max: PlayerStatsMaxAggregateOutputType | null
  }

  export type PlayerStatsAvgAggregateOutputType = {
    dpmAvg: number | null
    csmAvg: number | null
    kdaAvg: number | null
  }

  export type PlayerStatsSumAggregateOutputType = {
    dpmAvg: number | null
    csmAvg: number | null
    kdaAvg: number | null
  }

  export type PlayerStatsMinAggregateOutputType = {
    id: string | null
    userId: string | null
    dpmAvg: number | null
    csmAvg: number | null
    kdaAvg: number | null
  }

  export type PlayerStatsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    dpmAvg: number | null
    csmAvg: number | null
    kdaAvg: number | null
  }

  export type PlayerStatsCountAggregateOutputType = {
    id: number
    userId: number
    dpmAvg: number
    csmAvg: number
    kdaAvg: number
    _all: number
  }


  export type PlayerStatsAvgAggregateInputType = {
    dpmAvg?: true
    csmAvg?: true
    kdaAvg?: true
  }

  export type PlayerStatsSumAggregateInputType = {
    dpmAvg?: true
    csmAvg?: true
    kdaAvg?: true
  }

  export type PlayerStatsMinAggregateInputType = {
    id?: true
    userId?: true
    dpmAvg?: true
    csmAvg?: true
    kdaAvg?: true
  }

  export type PlayerStatsMaxAggregateInputType = {
    id?: true
    userId?: true
    dpmAvg?: true
    csmAvg?: true
    kdaAvg?: true
  }

  export type PlayerStatsCountAggregateInputType = {
    id?: true
    userId?: true
    dpmAvg?: true
    csmAvg?: true
    kdaAvg?: true
    _all?: true
  }

  export type PlayerStatsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerStats to aggregate.
     */
    where?: PlayerStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerStats to fetch.
     */
    orderBy?: PlayerStatsOrderByWithRelationInput | PlayerStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlayerStats
    **/
    _count?: true | PlayerStatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerStatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerStatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerStatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerStatsMaxAggregateInputType
  }

  export type GetPlayerStatsAggregateType<T extends PlayerStatsAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayerStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayerStats[P]>
      : GetScalarType<T[P], AggregatePlayerStats[P]>
  }




  export type PlayerStatsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerStatsWhereInput
    orderBy?: PlayerStatsOrderByWithAggregationInput | PlayerStatsOrderByWithAggregationInput[]
    by: PlayerStatsScalarFieldEnum[] | PlayerStatsScalarFieldEnum
    having?: PlayerStatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerStatsCountAggregateInputType | true
    _avg?: PlayerStatsAvgAggregateInputType
    _sum?: PlayerStatsSumAggregateInputType
    _min?: PlayerStatsMinAggregateInputType
    _max?: PlayerStatsMaxAggregateInputType
  }

  export type PlayerStatsGroupByOutputType = {
    id: string
    userId: string
    dpmAvg: number | null
    csmAvg: number | null
    kdaAvg: number | null
    _count: PlayerStatsCountAggregateOutputType | null
    _avg: PlayerStatsAvgAggregateOutputType | null
    _sum: PlayerStatsSumAggregateOutputType | null
    _min: PlayerStatsMinAggregateOutputType | null
    _max: PlayerStatsMaxAggregateOutputType | null
  }

  type GetPlayerStatsGroupByPayload<T extends PlayerStatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerStatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerStatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerStatsGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerStatsGroupByOutputType[P]>
        }
      >
    >


  export type PlayerStatsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    dpmAvg?: boolean
    csmAvg?: boolean
    kdaAvg?: boolean
    profile?: boolean | UserProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerStats"]>

  export type PlayerStatsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    dpmAvg?: boolean
    csmAvg?: boolean
    kdaAvg?: boolean
    profile?: boolean | UserProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerStats"]>

  export type PlayerStatsSelectScalar = {
    id?: boolean
    userId?: boolean
    dpmAvg?: boolean
    csmAvg?: boolean
    kdaAvg?: boolean
  }

  export type PlayerStatsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | UserProfileDefaultArgs<ExtArgs>
  }
  export type PlayerStatsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | UserProfileDefaultArgs<ExtArgs>
  }

  export type $PlayerStatsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlayerStats"
    objects: {
      profile: Prisma.$UserProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      dpmAvg: number | null
      csmAvg: number | null
      kdaAvg: number | null
    }, ExtArgs["result"]["playerStats"]>
    composites: {}
  }

  type PlayerStatsGetPayload<S extends boolean | null | undefined | PlayerStatsDefaultArgs> = $Result.GetResult<Prisma.$PlayerStatsPayload, S>

  type PlayerStatsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlayerStatsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlayerStatsCountAggregateInputType | true
    }

  export interface PlayerStatsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlayerStats'], meta: { name: 'PlayerStats' } }
    /**
     * Find zero or one PlayerStats that matches the filter.
     * @param {PlayerStatsFindUniqueArgs} args - Arguments to find a PlayerStats
     * @example
     * // Get one PlayerStats
     * const playerStats = await prisma.playerStats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerStatsFindUniqueArgs>(args: SelectSubset<T, PlayerStatsFindUniqueArgs<ExtArgs>>): Prisma__PlayerStatsClient<$Result.GetResult<Prisma.$PlayerStatsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PlayerStats that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlayerStatsFindUniqueOrThrowArgs} args - Arguments to find a PlayerStats
     * @example
     * // Get one PlayerStats
     * const playerStats = await prisma.playerStats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerStatsFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerStatsClient<$Result.GetResult<Prisma.$PlayerStatsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PlayerStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerStatsFindFirstArgs} args - Arguments to find a PlayerStats
     * @example
     * // Get one PlayerStats
     * const playerStats = await prisma.playerStats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerStatsFindFirstArgs>(args?: SelectSubset<T, PlayerStatsFindFirstArgs<ExtArgs>>): Prisma__PlayerStatsClient<$Result.GetResult<Prisma.$PlayerStatsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PlayerStats that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerStatsFindFirstOrThrowArgs} args - Arguments to find a PlayerStats
     * @example
     * // Get one PlayerStats
     * const playerStats = await prisma.playerStats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerStatsFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerStatsClient<$Result.GetResult<Prisma.$PlayerStatsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PlayerStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerStatsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlayerStats
     * const playerStats = await prisma.playerStats.findMany()
     * 
     * // Get first 10 PlayerStats
     * const playerStats = await prisma.playerStats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerStatsWithIdOnly = await prisma.playerStats.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerStatsFindManyArgs>(args?: SelectSubset<T, PlayerStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerStatsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PlayerStats.
     * @param {PlayerStatsCreateArgs} args - Arguments to create a PlayerStats.
     * @example
     * // Create one PlayerStats
     * const PlayerStats = await prisma.playerStats.create({
     *   data: {
     *     // ... data to create a PlayerStats
     *   }
     * })
     * 
     */
    create<T extends PlayerStatsCreateArgs>(args: SelectSubset<T, PlayerStatsCreateArgs<ExtArgs>>): Prisma__PlayerStatsClient<$Result.GetResult<Prisma.$PlayerStatsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PlayerStats.
     * @param {PlayerStatsCreateManyArgs} args - Arguments to create many PlayerStats.
     * @example
     * // Create many PlayerStats
     * const playerStats = await prisma.playerStats.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerStatsCreateManyArgs>(args?: SelectSubset<T, PlayerStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PlayerStats and returns the data saved in the database.
     * @param {PlayerStatsCreateManyAndReturnArgs} args - Arguments to create many PlayerStats.
     * @example
     * // Create many PlayerStats
     * const playerStats = await prisma.playerStats.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PlayerStats and only return the `id`
     * const playerStatsWithIdOnly = await prisma.playerStats.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlayerStatsCreateManyAndReturnArgs>(args?: SelectSubset<T, PlayerStatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerStatsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PlayerStats.
     * @param {PlayerStatsDeleteArgs} args - Arguments to delete one PlayerStats.
     * @example
     * // Delete one PlayerStats
     * const PlayerStats = await prisma.playerStats.delete({
     *   where: {
     *     // ... filter to delete one PlayerStats
     *   }
     * })
     * 
     */
    delete<T extends PlayerStatsDeleteArgs>(args: SelectSubset<T, PlayerStatsDeleteArgs<ExtArgs>>): Prisma__PlayerStatsClient<$Result.GetResult<Prisma.$PlayerStatsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PlayerStats.
     * @param {PlayerStatsUpdateArgs} args - Arguments to update one PlayerStats.
     * @example
     * // Update one PlayerStats
     * const playerStats = await prisma.playerStats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerStatsUpdateArgs>(args: SelectSubset<T, PlayerStatsUpdateArgs<ExtArgs>>): Prisma__PlayerStatsClient<$Result.GetResult<Prisma.$PlayerStatsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PlayerStats.
     * @param {PlayerStatsDeleteManyArgs} args - Arguments to filter PlayerStats to delete.
     * @example
     * // Delete a few PlayerStats
     * const { count } = await prisma.playerStats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerStatsDeleteManyArgs>(args?: SelectSubset<T, PlayerStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlayerStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerStatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlayerStats
     * const playerStats = await prisma.playerStats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerStatsUpdateManyArgs>(args: SelectSubset<T, PlayerStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlayerStats.
     * @param {PlayerStatsUpsertArgs} args - Arguments to update or create a PlayerStats.
     * @example
     * // Update or create a PlayerStats
     * const playerStats = await prisma.playerStats.upsert({
     *   create: {
     *     // ... data to create a PlayerStats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlayerStats we want to update
     *   }
     * })
     */
    upsert<T extends PlayerStatsUpsertArgs>(args: SelectSubset<T, PlayerStatsUpsertArgs<ExtArgs>>): Prisma__PlayerStatsClient<$Result.GetResult<Prisma.$PlayerStatsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PlayerStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerStatsCountArgs} args - Arguments to filter PlayerStats to count.
     * @example
     * // Count the number of PlayerStats
     * const count = await prisma.playerStats.count({
     *   where: {
     *     // ... the filter for the PlayerStats we want to count
     *   }
     * })
    **/
    count<T extends PlayerStatsCountArgs>(
      args?: Subset<T, PlayerStatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerStatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlayerStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerStatsAggregateArgs>(args: Subset<T, PlayerStatsAggregateArgs>): Prisma.PrismaPromise<GetPlayerStatsAggregateType<T>>

    /**
     * Group by PlayerStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerStatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerStatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerStatsGroupByArgs['orderBy'] }
        : { orderBy?: PlayerStatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlayerStats model
   */
  readonly fields: PlayerStatsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlayerStats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerStatsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends UserProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserProfileDefaultArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlayerStats model
   */ 
  interface PlayerStatsFieldRefs {
    readonly id: FieldRef<"PlayerStats", 'String'>
    readonly userId: FieldRef<"PlayerStats", 'String'>
    readonly dpmAvg: FieldRef<"PlayerStats", 'Float'>
    readonly csmAvg: FieldRef<"PlayerStats", 'Float'>
    readonly kdaAvg: FieldRef<"PlayerStats", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * PlayerStats findUnique
   */
  export type PlayerStatsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStats
     */
    select?: PlayerStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatsInclude<ExtArgs> | null
    /**
     * Filter, which PlayerStats to fetch.
     */
    where: PlayerStatsWhereUniqueInput
  }

  /**
   * PlayerStats findUniqueOrThrow
   */
  export type PlayerStatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStats
     */
    select?: PlayerStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatsInclude<ExtArgs> | null
    /**
     * Filter, which PlayerStats to fetch.
     */
    where: PlayerStatsWhereUniqueInput
  }

  /**
   * PlayerStats findFirst
   */
  export type PlayerStatsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStats
     */
    select?: PlayerStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatsInclude<ExtArgs> | null
    /**
     * Filter, which PlayerStats to fetch.
     */
    where?: PlayerStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerStats to fetch.
     */
    orderBy?: PlayerStatsOrderByWithRelationInput | PlayerStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerStats.
     */
    cursor?: PlayerStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerStats.
     */
    distinct?: PlayerStatsScalarFieldEnum | PlayerStatsScalarFieldEnum[]
  }

  /**
   * PlayerStats findFirstOrThrow
   */
  export type PlayerStatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStats
     */
    select?: PlayerStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatsInclude<ExtArgs> | null
    /**
     * Filter, which PlayerStats to fetch.
     */
    where?: PlayerStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerStats to fetch.
     */
    orderBy?: PlayerStatsOrderByWithRelationInput | PlayerStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerStats.
     */
    cursor?: PlayerStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerStats.
     */
    distinct?: PlayerStatsScalarFieldEnum | PlayerStatsScalarFieldEnum[]
  }

  /**
   * PlayerStats findMany
   */
  export type PlayerStatsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStats
     */
    select?: PlayerStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatsInclude<ExtArgs> | null
    /**
     * Filter, which PlayerStats to fetch.
     */
    where?: PlayerStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerStats to fetch.
     */
    orderBy?: PlayerStatsOrderByWithRelationInput | PlayerStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlayerStats.
     */
    cursor?: PlayerStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerStats.
     */
    skip?: number
    distinct?: PlayerStatsScalarFieldEnum | PlayerStatsScalarFieldEnum[]
  }

  /**
   * PlayerStats create
   */
  export type PlayerStatsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStats
     */
    select?: PlayerStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatsInclude<ExtArgs> | null
    /**
     * The data needed to create a PlayerStats.
     */
    data: XOR<PlayerStatsCreateInput, PlayerStatsUncheckedCreateInput>
  }

  /**
   * PlayerStats createMany
   */
  export type PlayerStatsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlayerStats.
     */
    data: PlayerStatsCreateManyInput | PlayerStatsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlayerStats createManyAndReturn
   */
  export type PlayerStatsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStats
     */
    select?: PlayerStatsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PlayerStats.
     */
    data: PlayerStatsCreateManyInput | PlayerStatsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlayerStats update
   */
  export type PlayerStatsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStats
     */
    select?: PlayerStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatsInclude<ExtArgs> | null
    /**
     * The data needed to update a PlayerStats.
     */
    data: XOR<PlayerStatsUpdateInput, PlayerStatsUncheckedUpdateInput>
    /**
     * Choose, which PlayerStats to update.
     */
    where: PlayerStatsWhereUniqueInput
  }

  /**
   * PlayerStats updateMany
   */
  export type PlayerStatsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlayerStats.
     */
    data: XOR<PlayerStatsUpdateManyMutationInput, PlayerStatsUncheckedUpdateManyInput>
    /**
     * Filter which PlayerStats to update
     */
    where?: PlayerStatsWhereInput
  }

  /**
   * PlayerStats upsert
   */
  export type PlayerStatsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStats
     */
    select?: PlayerStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatsInclude<ExtArgs> | null
    /**
     * The filter to search for the PlayerStats to update in case it exists.
     */
    where: PlayerStatsWhereUniqueInput
    /**
     * In case the PlayerStats found by the `where` argument doesn't exist, create a new PlayerStats with this data.
     */
    create: XOR<PlayerStatsCreateInput, PlayerStatsUncheckedCreateInput>
    /**
     * In case the PlayerStats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerStatsUpdateInput, PlayerStatsUncheckedUpdateInput>
  }

  /**
   * PlayerStats delete
   */
  export type PlayerStatsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStats
     */
    select?: PlayerStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatsInclude<ExtArgs> | null
    /**
     * Filter which PlayerStats to delete.
     */
    where: PlayerStatsWhereUniqueInput
  }

  /**
   * PlayerStats deleteMany
   */
  export type PlayerStatsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerStats to delete
     */
    where?: PlayerStatsWhereInput
  }

  /**
   * PlayerStats without action
   */
  export type PlayerStatsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerStats
     */
    select?: PlayerStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerStatsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const LobbyScalarFieldEnum: {
    id: 'id',
    guildId: 'guildId',
    channelId: 'channelId',
    messageId: 'messageId',
    name: 'name',
    slots: 'slots',
    mode: 'mode',
    state: 'state',
    createdBy: 'createdBy',
    currentRound: 'currentRound',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LobbyScalarFieldEnum = (typeof LobbyScalarFieldEnum)[keyof typeof LobbyScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    lobbyId: 'lobbyId',
    number: 'number',
    name: 'name',
    roleId: 'roleId',
    textChannelId: 'textChannelId',
    voiceChannelId: 'voiceChannelId'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const MatchScalarFieldEnum: {
    id: 'id',
    lobbyId: 'lobbyId',
    round: 'round',
    indexInRound: 'indexInRound',
    blueTeamId: 'blueTeamId',
    redTeamId: 'redTeamId',
    draftBlueUrl: 'draftBlueUrl',
    draftRedUrl: 'draftRedUrl',
    specUrl: 'specUrl',
    state: 'state',
    winnerTeamId: 'winnerTeamId'
  };

  export type MatchScalarFieldEnum = (typeof MatchScalarFieldEnum)[keyof typeof MatchScalarFieldEnum]


  export const UserProfileScalarFieldEnum: {
    id: 'id',
    discordUserId: 'discordUserId',
    summonerName: 'summonerName',
    preferredRoles: 'preferredRoles',
    opggUrl: 'opggUrl',
    dpmUrl: 'dpmUrl',
    region: 'region',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserProfileScalarFieldEnum = (typeof UserProfileScalarFieldEnum)[keyof typeof UserProfileScalarFieldEnum]


  export const LobbyParticipantScalarFieldEnum: {
    id: 'id',
    lobbyId: 'lobbyId',
    userId: 'userId',
    isCaptain: 'isCaptain',
    isSub: 'isSub',
    selectedRole: 'selectedRole',
    teamNumber: 'teamNumber'
  };

  export type LobbyParticipantScalarFieldEnum = (typeof LobbyParticipantScalarFieldEnum)[keyof typeof LobbyParticipantScalarFieldEnum]


  export const PlayerStatsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    dpmAvg: 'dpmAvg',
    csmAvg: 'csmAvg',
    kdaAvg: 'kdaAvg'
  };

  export type PlayerStatsScalarFieldEnum = (typeof PlayerStatsScalarFieldEnum)[keyof typeof PlayerStatsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'GameMode'
   */
  export type EnumGameModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GameMode'>
    


  /**
   * Reference to a field of type 'GameMode[]'
   */
  export type ListEnumGameModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GameMode[]'>
    


  /**
   * Reference to a field of type 'LobbyState'
   */
  export type EnumLobbyStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LobbyState'>
    


  /**
   * Reference to a field of type 'LobbyState[]'
   */
  export type ListEnumLobbyStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LobbyState[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'MatchState'
   */
  export type EnumMatchStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MatchState'>
    


  /**
   * Reference to a field of type 'MatchState[]'
   */
  export type ListEnumMatchStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MatchState[]'>
    


  /**
   * Reference to a field of type 'RoleName[]'
   */
  export type ListEnumRoleNameFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleName[]'>
    


  /**
   * Reference to a field of type 'RoleName'
   */
  export type EnumRoleNameFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleName'>
    


  /**
   * Reference to a field of type 'LoLRegion'
   */
  export type EnumLoLRegionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LoLRegion'>
    


  /**
   * Reference to a field of type 'LoLRegion[]'
   */
  export type ListEnumLoLRegionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LoLRegion[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type LobbyWhereInput = {
    AND?: LobbyWhereInput | LobbyWhereInput[]
    OR?: LobbyWhereInput[]
    NOT?: LobbyWhereInput | LobbyWhereInput[]
    id?: StringFilter<"Lobby"> | string
    guildId?: StringFilter<"Lobby"> | string
    channelId?: StringFilter<"Lobby"> | string
    messageId?: StringNullableFilter<"Lobby"> | string | null
    name?: StringFilter<"Lobby"> | string
    slots?: IntFilter<"Lobby"> | number
    mode?: EnumGameModeFilter<"Lobby"> | $Enums.GameMode
    state?: EnumLobbyStateFilter<"Lobby"> | $Enums.LobbyState
    createdBy?: StringFilter<"Lobby"> | string
    currentRound?: IntFilter<"Lobby"> | number
    createdAt?: DateTimeFilter<"Lobby"> | Date | string
    updatedAt?: DateTimeFilter<"Lobby"> | Date | string
    participants?: LobbyParticipantListRelationFilter
    teams?: TeamListRelationFilter
    matches?: MatchListRelationFilter
  }

  export type LobbyOrderByWithRelationInput = {
    id?: SortOrder
    guildId?: SortOrder
    channelId?: SortOrder
    messageId?: SortOrderInput | SortOrder
    name?: SortOrder
    slots?: SortOrder
    mode?: SortOrder
    state?: SortOrder
    createdBy?: SortOrder
    currentRound?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    participants?: LobbyParticipantOrderByRelationAggregateInput
    teams?: TeamOrderByRelationAggregateInput
    matches?: MatchOrderByRelationAggregateInput
  }

  export type LobbyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LobbyWhereInput | LobbyWhereInput[]
    OR?: LobbyWhereInput[]
    NOT?: LobbyWhereInput | LobbyWhereInput[]
    guildId?: StringFilter<"Lobby"> | string
    channelId?: StringFilter<"Lobby"> | string
    messageId?: StringNullableFilter<"Lobby"> | string | null
    name?: StringFilter<"Lobby"> | string
    slots?: IntFilter<"Lobby"> | number
    mode?: EnumGameModeFilter<"Lobby"> | $Enums.GameMode
    state?: EnumLobbyStateFilter<"Lobby"> | $Enums.LobbyState
    createdBy?: StringFilter<"Lobby"> | string
    currentRound?: IntFilter<"Lobby"> | number
    createdAt?: DateTimeFilter<"Lobby"> | Date | string
    updatedAt?: DateTimeFilter<"Lobby"> | Date | string
    participants?: LobbyParticipantListRelationFilter
    teams?: TeamListRelationFilter
    matches?: MatchListRelationFilter
  }, "id">

  export type LobbyOrderByWithAggregationInput = {
    id?: SortOrder
    guildId?: SortOrder
    channelId?: SortOrder
    messageId?: SortOrderInput | SortOrder
    name?: SortOrder
    slots?: SortOrder
    mode?: SortOrder
    state?: SortOrder
    createdBy?: SortOrder
    currentRound?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LobbyCountOrderByAggregateInput
    _avg?: LobbyAvgOrderByAggregateInput
    _max?: LobbyMaxOrderByAggregateInput
    _min?: LobbyMinOrderByAggregateInput
    _sum?: LobbySumOrderByAggregateInput
  }

  export type LobbyScalarWhereWithAggregatesInput = {
    AND?: LobbyScalarWhereWithAggregatesInput | LobbyScalarWhereWithAggregatesInput[]
    OR?: LobbyScalarWhereWithAggregatesInput[]
    NOT?: LobbyScalarWhereWithAggregatesInput | LobbyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Lobby"> | string
    guildId?: StringWithAggregatesFilter<"Lobby"> | string
    channelId?: StringWithAggregatesFilter<"Lobby"> | string
    messageId?: StringNullableWithAggregatesFilter<"Lobby"> | string | null
    name?: StringWithAggregatesFilter<"Lobby"> | string
    slots?: IntWithAggregatesFilter<"Lobby"> | number
    mode?: EnumGameModeWithAggregatesFilter<"Lobby"> | $Enums.GameMode
    state?: EnumLobbyStateWithAggregatesFilter<"Lobby"> | $Enums.LobbyState
    createdBy?: StringWithAggregatesFilter<"Lobby"> | string
    currentRound?: IntWithAggregatesFilter<"Lobby"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Lobby"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Lobby"> | Date | string
  }

  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    id?: StringFilter<"Team"> | string
    lobbyId?: StringFilter<"Team"> | string
    number?: IntFilter<"Team"> | number
    name?: StringFilter<"Team"> | string
    roleId?: StringNullableFilter<"Team"> | string | null
    textChannelId?: StringNullableFilter<"Team"> | string | null
    voiceChannelId?: StringNullableFilter<"Team"> | string | null
    lobby?: XOR<LobbyRelationFilter, LobbyWhereInput>
    blueMatches?: MatchListRelationFilter
    redMatches?: MatchListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    lobbyId?: SortOrder
    number?: SortOrder
    name?: SortOrder
    roleId?: SortOrderInput | SortOrder
    textChannelId?: SortOrderInput | SortOrder
    voiceChannelId?: SortOrderInput | SortOrder
    lobby?: LobbyOrderByWithRelationInput
    blueMatches?: MatchOrderByRelationAggregateInput
    redMatches?: MatchOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    lobbyId_number?: TeamLobbyIdNumberCompoundUniqueInput
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    lobbyId?: StringFilter<"Team"> | string
    number?: IntFilter<"Team"> | number
    name?: StringFilter<"Team"> | string
    roleId?: StringNullableFilter<"Team"> | string | null
    textChannelId?: StringNullableFilter<"Team"> | string | null
    voiceChannelId?: StringNullableFilter<"Team"> | string | null
    lobby?: XOR<LobbyRelationFilter, LobbyWhereInput>
    blueMatches?: MatchListRelationFilter
    redMatches?: MatchListRelationFilter
  }, "id" | "lobbyId_number">

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    lobbyId?: SortOrder
    number?: SortOrder
    name?: SortOrder
    roleId?: SortOrderInput | SortOrder
    textChannelId?: SortOrderInput | SortOrder
    voiceChannelId?: SortOrderInput | SortOrder
    _count?: TeamCountOrderByAggregateInput
    _avg?: TeamAvgOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
    _sum?: TeamSumOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Team"> | string
    lobbyId?: StringWithAggregatesFilter<"Team"> | string
    number?: IntWithAggregatesFilter<"Team"> | number
    name?: StringWithAggregatesFilter<"Team"> | string
    roleId?: StringNullableWithAggregatesFilter<"Team"> | string | null
    textChannelId?: StringNullableWithAggregatesFilter<"Team"> | string | null
    voiceChannelId?: StringNullableWithAggregatesFilter<"Team"> | string | null
  }

  export type MatchWhereInput = {
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    id?: StringFilter<"Match"> | string
    lobbyId?: StringFilter<"Match"> | string
    round?: IntFilter<"Match"> | number
    indexInRound?: IntFilter<"Match"> | number
    blueTeamId?: StringFilter<"Match"> | string
    redTeamId?: StringFilter<"Match"> | string
    draftBlueUrl?: StringNullableFilter<"Match"> | string | null
    draftRedUrl?: StringNullableFilter<"Match"> | string | null
    specUrl?: StringNullableFilter<"Match"> | string | null
    state?: EnumMatchStateFilter<"Match"> | $Enums.MatchState
    winnerTeamId?: StringNullableFilter<"Match"> | string | null
    lobby?: XOR<LobbyRelationFilter, LobbyWhereInput>
    blueTeam?: XOR<TeamRelationFilter, TeamWhereInput>
    redTeam?: XOR<TeamRelationFilter, TeamWhereInput>
  }

  export type MatchOrderByWithRelationInput = {
    id?: SortOrder
    lobbyId?: SortOrder
    round?: SortOrder
    indexInRound?: SortOrder
    blueTeamId?: SortOrder
    redTeamId?: SortOrder
    draftBlueUrl?: SortOrderInput | SortOrder
    draftRedUrl?: SortOrderInput | SortOrder
    specUrl?: SortOrderInput | SortOrder
    state?: SortOrder
    winnerTeamId?: SortOrderInput | SortOrder
    lobby?: LobbyOrderByWithRelationInput
    blueTeam?: TeamOrderByWithRelationInput
    redTeam?: TeamOrderByWithRelationInput
  }

  export type MatchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    lobbyId?: StringFilter<"Match"> | string
    round?: IntFilter<"Match"> | number
    indexInRound?: IntFilter<"Match"> | number
    blueTeamId?: StringFilter<"Match"> | string
    redTeamId?: StringFilter<"Match"> | string
    draftBlueUrl?: StringNullableFilter<"Match"> | string | null
    draftRedUrl?: StringNullableFilter<"Match"> | string | null
    specUrl?: StringNullableFilter<"Match"> | string | null
    state?: EnumMatchStateFilter<"Match"> | $Enums.MatchState
    winnerTeamId?: StringNullableFilter<"Match"> | string | null
    lobby?: XOR<LobbyRelationFilter, LobbyWhereInput>
    blueTeam?: XOR<TeamRelationFilter, TeamWhereInput>
    redTeam?: XOR<TeamRelationFilter, TeamWhereInput>
  }, "id">

  export type MatchOrderByWithAggregationInput = {
    id?: SortOrder
    lobbyId?: SortOrder
    round?: SortOrder
    indexInRound?: SortOrder
    blueTeamId?: SortOrder
    redTeamId?: SortOrder
    draftBlueUrl?: SortOrderInput | SortOrder
    draftRedUrl?: SortOrderInput | SortOrder
    specUrl?: SortOrderInput | SortOrder
    state?: SortOrder
    winnerTeamId?: SortOrderInput | SortOrder
    _count?: MatchCountOrderByAggregateInput
    _avg?: MatchAvgOrderByAggregateInput
    _max?: MatchMaxOrderByAggregateInput
    _min?: MatchMinOrderByAggregateInput
    _sum?: MatchSumOrderByAggregateInput
  }

  export type MatchScalarWhereWithAggregatesInput = {
    AND?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    OR?: MatchScalarWhereWithAggregatesInput[]
    NOT?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Match"> | string
    lobbyId?: StringWithAggregatesFilter<"Match"> | string
    round?: IntWithAggregatesFilter<"Match"> | number
    indexInRound?: IntWithAggregatesFilter<"Match"> | number
    blueTeamId?: StringWithAggregatesFilter<"Match"> | string
    redTeamId?: StringWithAggregatesFilter<"Match"> | string
    draftBlueUrl?: StringNullableWithAggregatesFilter<"Match"> | string | null
    draftRedUrl?: StringNullableWithAggregatesFilter<"Match"> | string | null
    specUrl?: StringNullableWithAggregatesFilter<"Match"> | string | null
    state?: EnumMatchStateWithAggregatesFilter<"Match"> | $Enums.MatchState
    winnerTeamId?: StringNullableWithAggregatesFilter<"Match"> | string | null
  }

  export type UserProfileWhereInput = {
    AND?: UserProfileWhereInput | UserProfileWhereInput[]
    OR?: UserProfileWhereInput[]
    NOT?: UserProfileWhereInput | UserProfileWhereInput[]
    id?: StringFilter<"UserProfile"> | string
    discordUserId?: StringFilter<"UserProfile"> | string
    summonerName?: StringNullableFilter<"UserProfile"> | string | null
    preferredRoles?: EnumRoleNameNullableListFilter<"UserProfile">
    opggUrl?: StringNullableFilter<"UserProfile"> | string | null
    dpmUrl?: StringNullableFilter<"UserProfile"> | string | null
    region?: EnumLoLRegionNullableFilter<"UserProfile"> | $Enums.LoLRegion | null
    createdAt?: DateTimeFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserProfile"> | Date | string
    participations?: LobbyParticipantListRelationFilter
    stats?: XOR<PlayerStatsNullableRelationFilter, PlayerStatsWhereInput> | null
  }

  export type UserProfileOrderByWithRelationInput = {
    id?: SortOrder
    discordUserId?: SortOrder
    summonerName?: SortOrderInput | SortOrder
    preferredRoles?: SortOrder
    opggUrl?: SortOrderInput | SortOrder
    dpmUrl?: SortOrderInput | SortOrder
    region?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    participations?: LobbyParticipantOrderByRelationAggregateInput
    stats?: PlayerStatsOrderByWithRelationInput
  }

  export type UserProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    discordUserId?: string
    AND?: UserProfileWhereInput | UserProfileWhereInput[]
    OR?: UserProfileWhereInput[]
    NOT?: UserProfileWhereInput | UserProfileWhereInput[]
    summonerName?: StringNullableFilter<"UserProfile"> | string | null
    preferredRoles?: EnumRoleNameNullableListFilter<"UserProfile">
    opggUrl?: StringNullableFilter<"UserProfile"> | string | null
    dpmUrl?: StringNullableFilter<"UserProfile"> | string | null
    region?: EnumLoLRegionNullableFilter<"UserProfile"> | $Enums.LoLRegion | null
    createdAt?: DateTimeFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserProfile"> | Date | string
    participations?: LobbyParticipantListRelationFilter
    stats?: XOR<PlayerStatsNullableRelationFilter, PlayerStatsWhereInput> | null
  }, "id" | "discordUserId">

  export type UserProfileOrderByWithAggregationInput = {
    id?: SortOrder
    discordUserId?: SortOrder
    summonerName?: SortOrderInput | SortOrder
    preferredRoles?: SortOrder
    opggUrl?: SortOrderInput | SortOrder
    dpmUrl?: SortOrderInput | SortOrder
    region?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserProfileCountOrderByAggregateInput
    _max?: UserProfileMaxOrderByAggregateInput
    _min?: UserProfileMinOrderByAggregateInput
  }

  export type UserProfileScalarWhereWithAggregatesInput = {
    AND?: UserProfileScalarWhereWithAggregatesInput | UserProfileScalarWhereWithAggregatesInput[]
    OR?: UserProfileScalarWhereWithAggregatesInput[]
    NOT?: UserProfileScalarWhereWithAggregatesInput | UserProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserProfile"> | string
    discordUserId?: StringWithAggregatesFilter<"UserProfile"> | string
    summonerName?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    preferredRoles?: EnumRoleNameNullableListFilter<"UserProfile">
    opggUrl?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    dpmUrl?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    region?: EnumLoLRegionNullableWithAggregatesFilter<"UserProfile"> | $Enums.LoLRegion | null
    createdAt?: DateTimeWithAggregatesFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserProfile"> | Date | string
  }

  export type LobbyParticipantWhereInput = {
    AND?: LobbyParticipantWhereInput | LobbyParticipantWhereInput[]
    OR?: LobbyParticipantWhereInput[]
    NOT?: LobbyParticipantWhereInput | LobbyParticipantWhereInput[]
    id?: StringFilter<"LobbyParticipant"> | string
    lobbyId?: StringFilter<"LobbyParticipant"> | string
    userId?: StringFilter<"LobbyParticipant"> | string
    isCaptain?: BoolFilter<"LobbyParticipant"> | boolean
    isSub?: BoolFilter<"LobbyParticipant"> | boolean
    selectedRole?: EnumRoleNameNullableFilter<"LobbyParticipant"> | $Enums.RoleName | null
    teamNumber?: IntNullableFilter<"LobbyParticipant"> | number | null
    lobby?: XOR<LobbyRelationFilter, LobbyWhereInput>
    profile?: XOR<UserProfileRelationFilter, UserProfileWhereInput>
  }

  export type LobbyParticipantOrderByWithRelationInput = {
    id?: SortOrder
    lobbyId?: SortOrder
    userId?: SortOrder
    isCaptain?: SortOrder
    isSub?: SortOrder
    selectedRole?: SortOrderInput | SortOrder
    teamNumber?: SortOrderInput | SortOrder
    lobby?: LobbyOrderByWithRelationInput
    profile?: UserProfileOrderByWithRelationInput
  }

  export type LobbyParticipantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    lobbyId_userId?: LobbyParticipantLobbyIdUserIdCompoundUniqueInput
    AND?: LobbyParticipantWhereInput | LobbyParticipantWhereInput[]
    OR?: LobbyParticipantWhereInput[]
    NOT?: LobbyParticipantWhereInput | LobbyParticipantWhereInput[]
    lobbyId?: StringFilter<"LobbyParticipant"> | string
    userId?: StringFilter<"LobbyParticipant"> | string
    isCaptain?: BoolFilter<"LobbyParticipant"> | boolean
    isSub?: BoolFilter<"LobbyParticipant"> | boolean
    selectedRole?: EnumRoleNameNullableFilter<"LobbyParticipant"> | $Enums.RoleName | null
    teamNumber?: IntNullableFilter<"LobbyParticipant"> | number | null
    lobby?: XOR<LobbyRelationFilter, LobbyWhereInput>
    profile?: XOR<UserProfileRelationFilter, UserProfileWhereInput>
  }, "id" | "lobbyId_userId">

  export type LobbyParticipantOrderByWithAggregationInput = {
    id?: SortOrder
    lobbyId?: SortOrder
    userId?: SortOrder
    isCaptain?: SortOrder
    isSub?: SortOrder
    selectedRole?: SortOrderInput | SortOrder
    teamNumber?: SortOrderInput | SortOrder
    _count?: LobbyParticipantCountOrderByAggregateInput
    _avg?: LobbyParticipantAvgOrderByAggregateInput
    _max?: LobbyParticipantMaxOrderByAggregateInput
    _min?: LobbyParticipantMinOrderByAggregateInput
    _sum?: LobbyParticipantSumOrderByAggregateInput
  }

  export type LobbyParticipantScalarWhereWithAggregatesInput = {
    AND?: LobbyParticipantScalarWhereWithAggregatesInput | LobbyParticipantScalarWhereWithAggregatesInput[]
    OR?: LobbyParticipantScalarWhereWithAggregatesInput[]
    NOT?: LobbyParticipantScalarWhereWithAggregatesInput | LobbyParticipantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LobbyParticipant"> | string
    lobbyId?: StringWithAggregatesFilter<"LobbyParticipant"> | string
    userId?: StringWithAggregatesFilter<"LobbyParticipant"> | string
    isCaptain?: BoolWithAggregatesFilter<"LobbyParticipant"> | boolean
    isSub?: BoolWithAggregatesFilter<"LobbyParticipant"> | boolean
    selectedRole?: EnumRoleNameNullableWithAggregatesFilter<"LobbyParticipant"> | $Enums.RoleName | null
    teamNumber?: IntNullableWithAggregatesFilter<"LobbyParticipant"> | number | null
  }

  export type PlayerStatsWhereInput = {
    AND?: PlayerStatsWhereInput | PlayerStatsWhereInput[]
    OR?: PlayerStatsWhereInput[]
    NOT?: PlayerStatsWhereInput | PlayerStatsWhereInput[]
    id?: StringFilter<"PlayerStats"> | string
    userId?: StringFilter<"PlayerStats"> | string
    dpmAvg?: FloatNullableFilter<"PlayerStats"> | number | null
    csmAvg?: FloatNullableFilter<"PlayerStats"> | number | null
    kdaAvg?: FloatNullableFilter<"PlayerStats"> | number | null
    profile?: XOR<UserProfileRelationFilter, UserProfileWhereInput>
  }

  export type PlayerStatsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    dpmAvg?: SortOrderInput | SortOrder
    csmAvg?: SortOrderInput | SortOrder
    kdaAvg?: SortOrderInput | SortOrder
    profile?: UserProfileOrderByWithRelationInput
  }

  export type PlayerStatsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: PlayerStatsWhereInput | PlayerStatsWhereInput[]
    OR?: PlayerStatsWhereInput[]
    NOT?: PlayerStatsWhereInput | PlayerStatsWhereInput[]
    dpmAvg?: FloatNullableFilter<"PlayerStats"> | number | null
    csmAvg?: FloatNullableFilter<"PlayerStats"> | number | null
    kdaAvg?: FloatNullableFilter<"PlayerStats"> | number | null
    profile?: XOR<UserProfileRelationFilter, UserProfileWhereInput>
  }, "id" | "userId">

  export type PlayerStatsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    dpmAvg?: SortOrderInput | SortOrder
    csmAvg?: SortOrderInput | SortOrder
    kdaAvg?: SortOrderInput | SortOrder
    _count?: PlayerStatsCountOrderByAggregateInput
    _avg?: PlayerStatsAvgOrderByAggregateInput
    _max?: PlayerStatsMaxOrderByAggregateInput
    _min?: PlayerStatsMinOrderByAggregateInput
    _sum?: PlayerStatsSumOrderByAggregateInput
  }

  export type PlayerStatsScalarWhereWithAggregatesInput = {
    AND?: PlayerStatsScalarWhereWithAggregatesInput | PlayerStatsScalarWhereWithAggregatesInput[]
    OR?: PlayerStatsScalarWhereWithAggregatesInput[]
    NOT?: PlayerStatsScalarWhereWithAggregatesInput | PlayerStatsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlayerStats"> | string
    userId?: StringWithAggregatesFilter<"PlayerStats"> | string
    dpmAvg?: FloatNullableWithAggregatesFilter<"PlayerStats"> | number | null
    csmAvg?: FloatNullableWithAggregatesFilter<"PlayerStats"> | number | null
    kdaAvg?: FloatNullableWithAggregatesFilter<"PlayerStats"> | number | null
  }

  export type LobbyCreateInput = {
    id?: string
    guildId: string
    channelId: string
    messageId?: string | null
    name: string
    slots: number
    mode: $Enums.GameMode
    state?: $Enums.LobbyState
    createdBy: string
    currentRound?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: LobbyParticipantCreateNestedManyWithoutLobbyInput
    teams?: TeamCreateNestedManyWithoutLobbyInput
    matches?: MatchCreateNestedManyWithoutLobbyInput
  }

  export type LobbyUncheckedCreateInput = {
    id?: string
    guildId: string
    channelId: string
    messageId?: string | null
    name: string
    slots: number
    mode: $Enums.GameMode
    state?: $Enums.LobbyState
    createdBy: string
    currentRound?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: LobbyParticipantUncheckedCreateNestedManyWithoutLobbyInput
    teams?: TeamUncheckedCreateNestedManyWithoutLobbyInput
    matches?: MatchUncheckedCreateNestedManyWithoutLobbyInput
  }

  export type LobbyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    slots?: IntFieldUpdateOperationsInput | number
    mode?: EnumGameModeFieldUpdateOperationsInput | $Enums.GameMode
    state?: EnumLobbyStateFieldUpdateOperationsInput | $Enums.LobbyState
    createdBy?: StringFieldUpdateOperationsInput | string
    currentRound?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: LobbyParticipantUpdateManyWithoutLobbyNestedInput
    teams?: TeamUpdateManyWithoutLobbyNestedInput
    matches?: MatchUpdateManyWithoutLobbyNestedInput
  }

  export type LobbyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    slots?: IntFieldUpdateOperationsInput | number
    mode?: EnumGameModeFieldUpdateOperationsInput | $Enums.GameMode
    state?: EnumLobbyStateFieldUpdateOperationsInput | $Enums.LobbyState
    createdBy?: StringFieldUpdateOperationsInput | string
    currentRound?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: LobbyParticipantUncheckedUpdateManyWithoutLobbyNestedInput
    teams?: TeamUncheckedUpdateManyWithoutLobbyNestedInput
    matches?: MatchUncheckedUpdateManyWithoutLobbyNestedInput
  }

  export type LobbyCreateManyInput = {
    id?: string
    guildId: string
    channelId: string
    messageId?: string | null
    name: string
    slots: number
    mode: $Enums.GameMode
    state?: $Enums.LobbyState
    createdBy: string
    currentRound?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LobbyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    slots?: IntFieldUpdateOperationsInput | number
    mode?: EnumGameModeFieldUpdateOperationsInput | $Enums.GameMode
    state?: EnumLobbyStateFieldUpdateOperationsInput | $Enums.LobbyState
    createdBy?: StringFieldUpdateOperationsInput | string
    currentRound?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LobbyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    slots?: IntFieldUpdateOperationsInput | number
    mode?: EnumGameModeFieldUpdateOperationsInput | $Enums.GameMode
    state?: EnumLobbyStateFieldUpdateOperationsInput | $Enums.LobbyState
    createdBy?: StringFieldUpdateOperationsInput | string
    currentRound?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamCreateInput = {
    id?: string
    number: number
    name: string
    roleId?: string | null
    textChannelId?: string | null
    voiceChannelId?: string | null
    lobby: LobbyCreateNestedOneWithoutTeamsInput
    blueMatches?: MatchCreateNestedManyWithoutBlueTeamInput
    redMatches?: MatchCreateNestedManyWithoutRedTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: string
    lobbyId: string
    number: number
    name: string
    roleId?: string | null
    textChannelId?: string | null
    voiceChannelId?: string | null
    blueMatches?: MatchUncheckedCreateNestedManyWithoutBlueTeamInput
    redMatches?: MatchUncheckedCreateNestedManyWithoutRedTeamInput
  }

  export type TeamUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    textChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    voiceChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    lobby?: LobbyUpdateOneRequiredWithoutTeamsNestedInput
    blueMatches?: MatchUpdateManyWithoutBlueTeamNestedInput
    redMatches?: MatchUpdateManyWithoutRedTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    lobbyId?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    textChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    voiceChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    blueMatches?: MatchUncheckedUpdateManyWithoutBlueTeamNestedInput
    redMatches?: MatchUncheckedUpdateManyWithoutRedTeamNestedInput
  }

  export type TeamCreateManyInput = {
    id?: string
    lobbyId: string
    number: number
    name: string
    roleId?: string | null
    textChannelId?: string | null
    voiceChannelId?: string | null
  }

  export type TeamUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    textChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    voiceChannelId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    lobbyId?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    textChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    voiceChannelId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MatchCreateInput = {
    id?: string
    round: number
    indexInRound: number
    draftBlueUrl?: string | null
    draftRedUrl?: string | null
    specUrl?: string | null
    state?: $Enums.MatchState
    winnerTeamId?: string | null
    lobby: LobbyCreateNestedOneWithoutMatchesInput
    blueTeam: TeamCreateNestedOneWithoutBlueMatchesInput
    redTeam: TeamCreateNestedOneWithoutRedMatchesInput
  }

  export type MatchUncheckedCreateInput = {
    id?: string
    lobbyId: string
    round: number
    indexInRound: number
    blueTeamId: string
    redTeamId: string
    draftBlueUrl?: string | null
    draftRedUrl?: string | null
    specUrl?: string | null
    state?: $Enums.MatchState
    winnerTeamId?: string | null
  }

  export type MatchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    round?: IntFieldUpdateOperationsInput | number
    indexInRound?: IntFieldUpdateOperationsInput | number
    draftBlueUrl?: NullableStringFieldUpdateOperationsInput | string | null
    draftRedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    specUrl?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    winnerTeamId?: NullableStringFieldUpdateOperationsInput | string | null
    lobby?: LobbyUpdateOneRequiredWithoutMatchesNestedInput
    blueTeam?: TeamUpdateOneRequiredWithoutBlueMatchesNestedInput
    redTeam?: TeamUpdateOneRequiredWithoutRedMatchesNestedInput
  }

  export type MatchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    lobbyId?: StringFieldUpdateOperationsInput | string
    round?: IntFieldUpdateOperationsInput | number
    indexInRound?: IntFieldUpdateOperationsInput | number
    blueTeamId?: StringFieldUpdateOperationsInput | string
    redTeamId?: StringFieldUpdateOperationsInput | string
    draftBlueUrl?: NullableStringFieldUpdateOperationsInput | string | null
    draftRedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    specUrl?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    winnerTeamId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MatchCreateManyInput = {
    id?: string
    lobbyId: string
    round: number
    indexInRound: number
    blueTeamId: string
    redTeamId: string
    draftBlueUrl?: string | null
    draftRedUrl?: string | null
    specUrl?: string | null
    state?: $Enums.MatchState
    winnerTeamId?: string | null
  }

  export type MatchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    round?: IntFieldUpdateOperationsInput | number
    indexInRound?: IntFieldUpdateOperationsInput | number
    draftBlueUrl?: NullableStringFieldUpdateOperationsInput | string | null
    draftRedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    specUrl?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    winnerTeamId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MatchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    lobbyId?: StringFieldUpdateOperationsInput | string
    round?: IntFieldUpdateOperationsInput | number
    indexInRound?: IntFieldUpdateOperationsInput | number
    blueTeamId?: StringFieldUpdateOperationsInput | string
    redTeamId?: StringFieldUpdateOperationsInput | string
    draftBlueUrl?: NullableStringFieldUpdateOperationsInput | string | null
    draftRedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    specUrl?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    winnerTeamId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserProfileCreateInput = {
    id?: string
    discordUserId: string
    summonerName?: string | null
    preferredRoles?: UserProfileCreatepreferredRolesInput | $Enums.RoleName[]
    opggUrl?: string | null
    dpmUrl?: string | null
    region?: $Enums.LoLRegion | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participations?: LobbyParticipantCreateNestedManyWithoutProfileInput
    stats?: PlayerStatsCreateNestedOneWithoutProfileInput
  }

  export type UserProfileUncheckedCreateInput = {
    id?: string
    discordUserId: string
    summonerName?: string | null
    preferredRoles?: UserProfileCreatepreferredRolesInput | $Enums.RoleName[]
    opggUrl?: string | null
    dpmUrl?: string | null
    region?: $Enums.LoLRegion | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participations?: LobbyParticipantUncheckedCreateNestedManyWithoutProfileInput
    stats?: PlayerStatsUncheckedCreateNestedOneWithoutProfileInput
  }

  export type UserProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordUserId?: StringFieldUpdateOperationsInput | string
    summonerName?: NullableStringFieldUpdateOperationsInput | string | null
    preferredRoles?: UserProfileUpdatepreferredRolesInput | $Enums.RoleName[]
    opggUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dpmUrl?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableEnumLoLRegionFieldUpdateOperationsInput | $Enums.LoLRegion | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participations?: LobbyParticipantUpdateManyWithoutProfileNestedInput
    stats?: PlayerStatsUpdateOneWithoutProfileNestedInput
  }

  export type UserProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordUserId?: StringFieldUpdateOperationsInput | string
    summonerName?: NullableStringFieldUpdateOperationsInput | string | null
    preferredRoles?: UserProfileUpdatepreferredRolesInput | $Enums.RoleName[]
    opggUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dpmUrl?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableEnumLoLRegionFieldUpdateOperationsInput | $Enums.LoLRegion | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participations?: LobbyParticipantUncheckedUpdateManyWithoutProfileNestedInput
    stats?: PlayerStatsUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type UserProfileCreateManyInput = {
    id?: string
    discordUserId: string
    summonerName?: string | null
    preferredRoles?: UserProfileCreatepreferredRolesInput | $Enums.RoleName[]
    opggUrl?: string | null
    dpmUrl?: string | null
    region?: $Enums.LoLRegion | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordUserId?: StringFieldUpdateOperationsInput | string
    summonerName?: NullableStringFieldUpdateOperationsInput | string | null
    preferredRoles?: UserProfileUpdatepreferredRolesInput | $Enums.RoleName[]
    opggUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dpmUrl?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableEnumLoLRegionFieldUpdateOperationsInput | $Enums.LoLRegion | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordUserId?: StringFieldUpdateOperationsInput | string
    summonerName?: NullableStringFieldUpdateOperationsInput | string | null
    preferredRoles?: UserProfileUpdatepreferredRolesInput | $Enums.RoleName[]
    opggUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dpmUrl?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableEnumLoLRegionFieldUpdateOperationsInput | $Enums.LoLRegion | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LobbyParticipantCreateInput = {
    id?: string
    isCaptain?: boolean
    isSub?: boolean
    selectedRole?: $Enums.RoleName | null
    teamNumber?: number | null
    lobby: LobbyCreateNestedOneWithoutParticipantsInput
    profile: UserProfileCreateNestedOneWithoutParticipationsInput
  }

  export type LobbyParticipantUncheckedCreateInput = {
    id?: string
    lobbyId: string
    userId: string
    isCaptain?: boolean
    isSub?: boolean
    selectedRole?: $Enums.RoleName | null
    teamNumber?: number | null
  }

  export type LobbyParticipantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isSub?: BoolFieldUpdateOperationsInput | boolean
    selectedRole?: NullableEnumRoleNameFieldUpdateOperationsInput | $Enums.RoleName | null
    teamNumber?: NullableIntFieldUpdateOperationsInput | number | null
    lobby?: LobbyUpdateOneRequiredWithoutParticipantsNestedInput
    profile?: UserProfileUpdateOneRequiredWithoutParticipationsNestedInput
  }

  export type LobbyParticipantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    lobbyId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isSub?: BoolFieldUpdateOperationsInput | boolean
    selectedRole?: NullableEnumRoleNameFieldUpdateOperationsInput | $Enums.RoleName | null
    teamNumber?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LobbyParticipantCreateManyInput = {
    id?: string
    lobbyId: string
    userId: string
    isCaptain?: boolean
    isSub?: boolean
    selectedRole?: $Enums.RoleName | null
    teamNumber?: number | null
  }

  export type LobbyParticipantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isSub?: BoolFieldUpdateOperationsInput | boolean
    selectedRole?: NullableEnumRoleNameFieldUpdateOperationsInput | $Enums.RoleName | null
    teamNumber?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LobbyParticipantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    lobbyId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isSub?: BoolFieldUpdateOperationsInput | boolean
    selectedRole?: NullableEnumRoleNameFieldUpdateOperationsInput | $Enums.RoleName | null
    teamNumber?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerStatsCreateInput = {
    id?: string
    dpmAvg?: number | null
    csmAvg?: number | null
    kdaAvg?: number | null
    profile: UserProfileCreateNestedOneWithoutStatsInput
  }

  export type PlayerStatsUncheckedCreateInput = {
    id?: string
    userId: string
    dpmAvg?: number | null
    csmAvg?: number | null
    kdaAvg?: number | null
  }

  export type PlayerStatsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dpmAvg?: NullableFloatFieldUpdateOperationsInput | number | null
    csmAvg?: NullableFloatFieldUpdateOperationsInput | number | null
    kdaAvg?: NullableFloatFieldUpdateOperationsInput | number | null
    profile?: UserProfileUpdateOneRequiredWithoutStatsNestedInput
  }

  export type PlayerStatsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    dpmAvg?: NullableFloatFieldUpdateOperationsInput | number | null
    csmAvg?: NullableFloatFieldUpdateOperationsInput | number | null
    kdaAvg?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PlayerStatsCreateManyInput = {
    id?: string
    userId: string
    dpmAvg?: number | null
    csmAvg?: number | null
    kdaAvg?: number | null
  }

  export type PlayerStatsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dpmAvg?: NullableFloatFieldUpdateOperationsInput | number | null
    csmAvg?: NullableFloatFieldUpdateOperationsInput | number | null
    kdaAvg?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PlayerStatsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    dpmAvg?: NullableFloatFieldUpdateOperationsInput | number | null
    csmAvg?: NullableFloatFieldUpdateOperationsInput | number | null
    kdaAvg?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumGameModeFilter<$PrismaModel = never> = {
    equals?: $Enums.GameMode | EnumGameModeFieldRefInput<$PrismaModel>
    in?: $Enums.GameMode[] | ListEnumGameModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameMode[] | ListEnumGameModeFieldRefInput<$PrismaModel>
    not?: NestedEnumGameModeFilter<$PrismaModel> | $Enums.GameMode
  }

  export type EnumLobbyStateFilter<$PrismaModel = never> = {
    equals?: $Enums.LobbyState | EnumLobbyStateFieldRefInput<$PrismaModel>
    in?: $Enums.LobbyState[] | ListEnumLobbyStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.LobbyState[] | ListEnumLobbyStateFieldRefInput<$PrismaModel>
    not?: NestedEnumLobbyStateFilter<$PrismaModel> | $Enums.LobbyState
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type LobbyParticipantListRelationFilter = {
    every?: LobbyParticipantWhereInput
    some?: LobbyParticipantWhereInput
    none?: LobbyParticipantWhereInput
  }

  export type TeamListRelationFilter = {
    every?: TeamWhereInput
    some?: TeamWhereInput
    none?: TeamWhereInput
  }

  export type MatchListRelationFilter = {
    every?: MatchWhereInput
    some?: MatchWhereInput
    none?: MatchWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type LobbyParticipantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LobbyCountOrderByAggregateInput = {
    id?: SortOrder
    guildId?: SortOrder
    channelId?: SortOrder
    messageId?: SortOrder
    name?: SortOrder
    slots?: SortOrder
    mode?: SortOrder
    state?: SortOrder
    createdBy?: SortOrder
    currentRound?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LobbyAvgOrderByAggregateInput = {
    slots?: SortOrder
    currentRound?: SortOrder
  }

  export type LobbyMaxOrderByAggregateInput = {
    id?: SortOrder
    guildId?: SortOrder
    channelId?: SortOrder
    messageId?: SortOrder
    name?: SortOrder
    slots?: SortOrder
    mode?: SortOrder
    state?: SortOrder
    createdBy?: SortOrder
    currentRound?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LobbyMinOrderByAggregateInput = {
    id?: SortOrder
    guildId?: SortOrder
    channelId?: SortOrder
    messageId?: SortOrder
    name?: SortOrder
    slots?: SortOrder
    mode?: SortOrder
    state?: SortOrder
    createdBy?: SortOrder
    currentRound?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LobbySumOrderByAggregateInput = {
    slots?: SortOrder
    currentRound?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumGameModeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GameMode | EnumGameModeFieldRefInput<$PrismaModel>
    in?: $Enums.GameMode[] | ListEnumGameModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameMode[] | ListEnumGameModeFieldRefInput<$PrismaModel>
    not?: NestedEnumGameModeWithAggregatesFilter<$PrismaModel> | $Enums.GameMode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGameModeFilter<$PrismaModel>
    _max?: NestedEnumGameModeFilter<$PrismaModel>
  }

  export type EnumLobbyStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LobbyState | EnumLobbyStateFieldRefInput<$PrismaModel>
    in?: $Enums.LobbyState[] | ListEnumLobbyStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.LobbyState[] | ListEnumLobbyStateFieldRefInput<$PrismaModel>
    not?: NestedEnumLobbyStateWithAggregatesFilter<$PrismaModel> | $Enums.LobbyState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLobbyStateFilter<$PrismaModel>
    _max?: NestedEnumLobbyStateFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type LobbyRelationFilter = {
    is?: LobbyWhereInput
    isNot?: LobbyWhereInput
  }

  export type TeamLobbyIdNumberCompoundUniqueInput = {
    lobbyId: string
    number: number
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    lobbyId?: SortOrder
    number?: SortOrder
    name?: SortOrder
    roleId?: SortOrder
    textChannelId?: SortOrder
    voiceChannelId?: SortOrder
  }

  export type TeamAvgOrderByAggregateInput = {
    number?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    lobbyId?: SortOrder
    number?: SortOrder
    name?: SortOrder
    roleId?: SortOrder
    textChannelId?: SortOrder
    voiceChannelId?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    lobbyId?: SortOrder
    number?: SortOrder
    name?: SortOrder
    roleId?: SortOrder
    textChannelId?: SortOrder
    voiceChannelId?: SortOrder
  }

  export type TeamSumOrderByAggregateInput = {
    number?: SortOrder
  }

  export type EnumMatchStateFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchState | EnumMatchStateFieldRefInput<$PrismaModel>
    in?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    not?: NestedEnumMatchStateFilter<$PrismaModel> | $Enums.MatchState
  }

  export type TeamRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type MatchCountOrderByAggregateInput = {
    id?: SortOrder
    lobbyId?: SortOrder
    round?: SortOrder
    indexInRound?: SortOrder
    blueTeamId?: SortOrder
    redTeamId?: SortOrder
    draftBlueUrl?: SortOrder
    draftRedUrl?: SortOrder
    specUrl?: SortOrder
    state?: SortOrder
    winnerTeamId?: SortOrder
  }

  export type MatchAvgOrderByAggregateInput = {
    round?: SortOrder
    indexInRound?: SortOrder
  }

  export type MatchMaxOrderByAggregateInput = {
    id?: SortOrder
    lobbyId?: SortOrder
    round?: SortOrder
    indexInRound?: SortOrder
    blueTeamId?: SortOrder
    redTeamId?: SortOrder
    draftBlueUrl?: SortOrder
    draftRedUrl?: SortOrder
    specUrl?: SortOrder
    state?: SortOrder
    winnerTeamId?: SortOrder
  }

  export type MatchMinOrderByAggregateInput = {
    id?: SortOrder
    lobbyId?: SortOrder
    round?: SortOrder
    indexInRound?: SortOrder
    blueTeamId?: SortOrder
    redTeamId?: SortOrder
    draftBlueUrl?: SortOrder
    draftRedUrl?: SortOrder
    specUrl?: SortOrder
    state?: SortOrder
    winnerTeamId?: SortOrder
  }

  export type MatchSumOrderByAggregateInput = {
    round?: SortOrder
    indexInRound?: SortOrder
  }

  export type EnumMatchStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchState | EnumMatchStateFieldRefInput<$PrismaModel>
    in?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    not?: NestedEnumMatchStateWithAggregatesFilter<$PrismaModel> | $Enums.MatchState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMatchStateFilter<$PrismaModel>
    _max?: NestedEnumMatchStateFilter<$PrismaModel>
  }

  export type EnumRoleNameNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleName[] | ListEnumRoleNameFieldRefInput<$PrismaModel> | null
    has?: $Enums.RoleName | EnumRoleNameFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.RoleName[] | ListEnumRoleNameFieldRefInput<$PrismaModel>
    hasSome?: $Enums.RoleName[] | ListEnumRoleNameFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumLoLRegionNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.LoLRegion | EnumLoLRegionFieldRefInput<$PrismaModel> | null
    in?: $Enums.LoLRegion[] | ListEnumLoLRegionFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.LoLRegion[] | ListEnumLoLRegionFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLoLRegionNullableFilter<$PrismaModel> | $Enums.LoLRegion | null
  }

  export type PlayerStatsNullableRelationFilter = {
    is?: PlayerStatsWhereInput | null
    isNot?: PlayerStatsWhereInput | null
  }

  export type UserProfileCountOrderByAggregateInput = {
    id?: SortOrder
    discordUserId?: SortOrder
    summonerName?: SortOrder
    preferredRoles?: SortOrder
    opggUrl?: SortOrder
    dpmUrl?: SortOrder
    region?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    discordUserId?: SortOrder
    summonerName?: SortOrder
    opggUrl?: SortOrder
    dpmUrl?: SortOrder
    region?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileMinOrderByAggregateInput = {
    id?: SortOrder
    discordUserId?: SortOrder
    summonerName?: SortOrder
    opggUrl?: SortOrder
    dpmUrl?: SortOrder
    region?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumLoLRegionNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LoLRegion | EnumLoLRegionFieldRefInput<$PrismaModel> | null
    in?: $Enums.LoLRegion[] | ListEnumLoLRegionFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.LoLRegion[] | ListEnumLoLRegionFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLoLRegionNullableWithAggregatesFilter<$PrismaModel> | $Enums.LoLRegion | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumLoLRegionNullableFilter<$PrismaModel>
    _max?: NestedEnumLoLRegionNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumRoleNameNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleName | EnumRoleNameFieldRefInput<$PrismaModel> | null
    in?: $Enums.RoleName[] | ListEnumRoleNameFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RoleName[] | ListEnumRoleNameFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleNameNullableFilter<$PrismaModel> | $Enums.RoleName | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserProfileRelationFilter = {
    is?: UserProfileWhereInput
    isNot?: UserProfileWhereInput
  }

  export type LobbyParticipantLobbyIdUserIdCompoundUniqueInput = {
    lobbyId: string
    userId: string
  }

  export type LobbyParticipantCountOrderByAggregateInput = {
    id?: SortOrder
    lobbyId?: SortOrder
    userId?: SortOrder
    isCaptain?: SortOrder
    isSub?: SortOrder
    selectedRole?: SortOrder
    teamNumber?: SortOrder
  }

  export type LobbyParticipantAvgOrderByAggregateInput = {
    teamNumber?: SortOrder
  }

  export type LobbyParticipantMaxOrderByAggregateInput = {
    id?: SortOrder
    lobbyId?: SortOrder
    userId?: SortOrder
    isCaptain?: SortOrder
    isSub?: SortOrder
    selectedRole?: SortOrder
    teamNumber?: SortOrder
  }

  export type LobbyParticipantMinOrderByAggregateInput = {
    id?: SortOrder
    lobbyId?: SortOrder
    userId?: SortOrder
    isCaptain?: SortOrder
    isSub?: SortOrder
    selectedRole?: SortOrder
    teamNumber?: SortOrder
  }

  export type LobbyParticipantSumOrderByAggregateInput = {
    teamNumber?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumRoleNameNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleName | EnumRoleNameFieldRefInput<$PrismaModel> | null
    in?: $Enums.RoleName[] | ListEnumRoleNameFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RoleName[] | ListEnumRoleNameFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleNameNullableWithAggregatesFilter<$PrismaModel> | $Enums.RoleName | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumRoleNameNullableFilter<$PrismaModel>
    _max?: NestedEnumRoleNameNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type PlayerStatsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    dpmAvg?: SortOrder
    csmAvg?: SortOrder
    kdaAvg?: SortOrder
  }

  export type PlayerStatsAvgOrderByAggregateInput = {
    dpmAvg?: SortOrder
    csmAvg?: SortOrder
    kdaAvg?: SortOrder
  }

  export type PlayerStatsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    dpmAvg?: SortOrder
    csmAvg?: SortOrder
    kdaAvg?: SortOrder
  }

  export type PlayerStatsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    dpmAvg?: SortOrder
    csmAvg?: SortOrder
    kdaAvg?: SortOrder
  }

  export type PlayerStatsSumOrderByAggregateInput = {
    dpmAvg?: SortOrder
    csmAvg?: SortOrder
    kdaAvg?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type LobbyParticipantCreateNestedManyWithoutLobbyInput = {
    create?: XOR<LobbyParticipantCreateWithoutLobbyInput, LobbyParticipantUncheckedCreateWithoutLobbyInput> | LobbyParticipantCreateWithoutLobbyInput[] | LobbyParticipantUncheckedCreateWithoutLobbyInput[]
    connectOrCreate?: LobbyParticipantCreateOrConnectWithoutLobbyInput | LobbyParticipantCreateOrConnectWithoutLobbyInput[]
    createMany?: LobbyParticipantCreateManyLobbyInputEnvelope
    connect?: LobbyParticipantWhereUniqueInput | LobbyParticipantWhereUniqueInput[]
  }

  export type TeamCreateNestedManyWithoutLobbyInput = {
    create?: XOR<TeamCreateWithoutLobbyInput, TeamUncheckedCreateWithoutLobbyInput> | TeamCreateWithoutLobbyInput[] | TeamUncheckedCreateWithoutLobbyInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutLobbyInput | TeamCreateOrConnectWithoutLobbyInput[]
    createMany?: TeamCreateManyLobbyInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type MatchCreateNestedManyWithoutLobbyInput = {
    create?: XOR<MatchCreateWithoutLobbyInput, MatchUncheckedCreateWithoutLobbyInput> | MatchCreateWithoutLobbyInput[] | MatchUncheckedCreateWithoutLobbyInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutLobbyInput | MatchCreateOrConnectWithoutLobbyInput[]
    createMany?: MatchCreateManyLobbyInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type LobbyParticipantUncheckedCreateNestedManyWithoutLobbyInput = {
    create?: XOR<LobbyParticipantCreateWithoutLobbyInput, LobbyParticipantUncheckedCreateWithoutLobbyInput> | LobbyParticipantCreateWithoutLobbyInput[] | LobbyParticipantUncheckedCreateWithoutLobbyInput[]
    connectOrCreate?: LobbyParticipantCreateOrConnectWithoutLobbyInput | LobbyParticipantCreateOrConnectWithoutLobbyInput[]
    createMany?: LobbyParticipantCreateManyLobbyInputEnvelope
    connect?: LobbyParticipantWhereUniqueInput | LobbyParticipantWhereUniqueInput[]
  }

  export type TeamUncheckedCreateNestedManyWithoutLobbyInput = {
    create?: XOR<TeamCreateWithoutLobbyInput, TeamUncheckedCreateWithoutLobbyInput> | TeamCreateWithoutLobbyInput[] | TeamUncheckedCreateWithoutLobbyInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutLobbyInput | TeamCreateOrConnectWithoutLobbyInput[]
    createMany?: TeamCreateManyLobbyInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutLobbyInput = {
    create?: XOR<MatchCreateWithoutLobbyInput, MatchUncheckedCreateWithoutLobbyInput> | MatchCreateWithoutLobbyInput[] | MatchUncheckedCreateWithoutLobbyInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutLobbyInput | MatchCreateOrConnectWithoutLobbyInput[]
    createMany?: MatchCreateManyLobbyInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumGameModeFieldUpdateOperationsInput = {
    set?: $Enums.GameMode
  }

  export type EnumLobbyStateFieldUpdateOperationsInput = {
    set?: $Enums.LobbyState
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type LobbyParticipantUpdateManyWithoutLobbyNestedInput = {
    create?: XOR<LobbyParticipantCreateWithoutLobbyInput, LobbyParticipantUncheckedCreateWithoutLobbyInput> | LobbyParticipantCreateWithoutLobbyInput[] | LobbyParticipantUncheckedCreateWithoutLobbyInput[]
    connectOrCreate?: LobbyParticipantCreateOrConnectWithoutLobbyInput | LobbyParticipantCreateOrConnectWithoutLobbyInput[]
    upsert?: LobbyParticipantUpsertWithWhereUniqueWithoutLobbyInput | LobbyParticipantUpsertWithWhereUniqueWithoutLobbyInput[]
    createMany?: LobbyParticipantCreateManyLobbyInputEnvelope
    set?: LobbyParticipantWhereUniqueInput | LobbyParticipantWhereUniqueInput[]
    disconnect?: LobbyParticipantWhereUniqueInput | LobbyParticipantWhereUniqueInput[]
    delete?: LobbyParticipantWhereUniqueInput | LobbyParticipantWhereUniqueInput[]
    connect?: LobbyParticipantWhereUniqueInput | LobbyParticipantWhereUniqueInput[]
    update?: LobbyParticipantUpdateWithWhereUniqueWithoutLobbyInput | LobbyParticipantUpdateWithWhereUniqueWithoutLobbyInput[]
    updateMany?: LobbyParticipantUpdateManyWithWhereWithoutLobbyInput | LobbyParticipantUpdateManyWithWhereWithoutLobbyInput[]
    deleteMany?: LobbyParticipantScalarWhereInput | LobbyParticipantScalarWhereInput[]
  }

  export type TeamUpdateManyWithoutLobbyNestedInput = {
    create?: XOR<TeamCreateWithoutLobbyInput, TeamUncheckedCreateWithoutLobbyInput> | TeamCreateWithoutLobbyInput[] | TeamUncheckedCreateWithoutLobbyInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutLobbyInput | TeamCreateOrConnectWithoutLobbyInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutLobbyInput | TeamUpsertWithWhereUniqueWithoutLobbyInput[]
    createMany?: TeamCreateManyLobbyInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutLobbyInput | TeamUpdateWithWhereUniqueWithoutLobbyInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutLobbyInput | TeamUpdateManyWithWhereWithoutLobbyInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type MatchUpdateManyWithoutLobbyNestedInput = {
    create?: XOR<MatchCreateWithoutLobbyInput, MatchUncheckedCreateWithoutLobbyInput> | MatchCreateWithoutLobbyInput[] | MatchUncheckedCreateWithoutLobbyInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutLobbyInput | MatchCreateOrConnectWithoutLobbyInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutLobbyInput | MatchUpsertWithWhereUniqueWithoutLobbyInput[]
    createMany?: MatchCreateManyLobbyInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutLobbyInput | MatchUpdateWithWhereUniqueWithoutLobbyInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutLobbyInput | MatchUpdateManyWithWhereWithoutLobbyInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type LobbyParticipantUncheckedUpdateManyWithoutLobbyNestedInput = {
    create?: XOR<LobbyParticipantCreateWithoutLobbyInput, LobbyParticipantUncheckedCreateWithoutLobbyInput> | LobbyParticipantCreateWithoutLobbyInput[] | LobbyParticipantUncheckedCreateWithoutLobbyInput[]
    connectOrCreate?: LobbyParticipantCreateOrConnectWithoutLobbyInput | LobbyParticipantCreateOrConnectWithoutLobbyInput[]
    upsert?: LobbyParticipantUpsertWithWhereUniqueWithoutLobbyInput | LobbyParticipantUpsertWithWhereUniqueWithoutLobbyInput[]
    createMany?: LobbyParticipantCreateManyLobbyInputEnvelope
    set?: LobbyParticipantWhereUniqueInput | LobbyParticipantWhereUniqueInput[]
    disconnect?: LobbyParticipantWhereUniqueInput | LobbyParticipantWhereUniqueInput[]
    delete?: LobbyParticipantWhereUniqueInput | LobbyParticipantWhereUniqueInput[]
    connect?: LobbyParticipantWhereUniqueInput | LobbyParticipantWhereUniqueInput[]
    update?: LobbyParticipantUpdateWithWhereUniqueWithoutLobbyInput | LobbyParticipantUpdateWithWhereUniqueWithoutLobbyInput[]
    updateMany?: LobbyParticipantUpdateManyWithWhereWithoutLobbyInput | LobbyParticipantUpdateManyWithWhereWithoutLobbyInput[]
    deleteMany?: LobbyParticipantScalarWhereInput | LobbyParticipantScalarWhereInput[]
  }

  export type TeamUncheckedUpdateManyWithoutLobbyNestedInput = {
    create?: XOR<TeamCreateWithoutLobbyInput, TeamUncheckedCreateWithoutLobbyInput> | TeamCreateWithoutLobbyInput[] | TeamUncheckedCreateWithoutLobbyInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutLobbyInput | TeamCreateOrConnectWithoutLobbyInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutLobbyInput | TeamUpsertWithWhereUniqueWithoutLobbyInput[]
    createMany?: TeamCreateManyLobbyInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutLobbyInput | TeamUpdateWithWhereUniqueWithoutLobbyInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutLobbyInput | TeamUpdateManyWithWhereWithoutLobbyInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutLobbyNestedInput = {
    create?: XOR<MatchCreateWithoutLobbyInput, MatchUncheckedCreateWithoutLobbyInput> | MatchCreateWithoutLobbyInput[] | MatchUncheckedCreateWithoutLobbyInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutLobbyInput | MatchCreateOrConnectWithoutLobbyInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutLobbyInput | MatchUpsertWithWhereUniqueWithoutLobbyInput[]
    createMany?: MatchCreateManyLobbyInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutLobbyInput | MatchUpdateWithWhereUniqueWithoutLobbyInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutLobbyInput | MatchUpdateManyWithWhereWithoutLobbyInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type LobbyCreateNestedOneWithoutTeamsInput = {
    create?: XOR<LobbyCreateWithoutTeamsInput, LobbyUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: LobbyCreateOrConnectWithoutTeamsInput
    connect?: LobbyWhereUniqueInput
  }

  export type MatchCreateNestedManyWithoutBlueTeamInput = {
    create?: XOR<MatchCreateWithoutBlueTeamInput, MatchUncheckedCreateWithoutBlueTeamInput> | MatchCreateWithoutBlueTeamInput[] | MatchUncheckedCreateWithoutBlueTeamInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutBlueTeamInput | MatchCreateOrConnectWithoutBlueTeamInput[]
    createMany?: MatchCreateManyBlueTeamInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MatchCreateNestedManyWithoutRedTeamInput = {
    create?: XOR<MatchCreateWithoutRedTeamInput, MatchUncheckedCreateWithoutRedTeamInput> | MatchCreateWithoutRedTeamInput[] | MatchUncheckedCreateWithoutRedTeamInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutRedTeamInput | MatchCreateOrConnectWithoutRedTeamInput[]
    createMany?: MatchCreateManyRedTeamInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutBlueTeamInput = {
    create?: XOR<MatchCreateWithoutBlueTeamInput, MatchUncheckedCreateWithoutBlueTeamInput> | MatchCreateWithoutBlueTeamInput[] | MatchUncheckedCreateWithoutBlueTeamInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutBlueTeamInput | MatchCreateOrConnectWithoutBlueTeamInput[]
    createMany?: MatchCreateManyBlueTeamInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutRedTeamInput = {
    create?: XOR<MatchCreateWithoutRedTeamInput, MatchUncheckedCreateWithoutRedTeamInput> | MatchCreateWithoutRedTeamInput[] | MatchUncheckedCreateWithoutRedTeamInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutRedTeamInput | MatchCreateOrConnectWithoutRedTeamInput[]
    createMany?: MatchCreateManyRedTeamInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type LobbyUpdateOneRequiredWithoutTeamsNestedInput = {
    create?: XOR<LobbyCreateWithoutTeamsInput, LobbyUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: LobbyCreateOrConnectWithoutTeamsInput
    upsert?: LobbyUpsertWithoutTeamsInput
    connect?: LobbyWhereUniqueInput
    update?: XOR<XOR<LobbyUpdateToOneWithWhereWithoutTeamsInput, LobbyUpdateWithoutTeamsInput>, LobbyUncheckedUpdateWithoutTeamsInput>
  }

  export type MatchUpdateManyWithoutBlueTeamNestedInput = {
    create?: XOR<MatchCreateWithoutBlueTeamInput, MatchUncheckedCreateWithoutBlueTeamInput> | MatchCreateWithoutBlueTeamInput[] | MatchUncheckedCreateWithoutBlueTeamInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutBlueTeamInput | MatchCreateOrConnectWithoutBlueTeamInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutBlueTeamInput | MatchUpsertWithWhereUniqueWithoutBlueTeamInput[]
    createMany?: MatchCreateManyBlueTeamInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutBlueTeamInput | MatchUpdateWithWhereUniqueWithoutBlueTeamInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutBlueTeamInput | MatchUpdateManyWithWhereWithoutBlueTeamInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MatchUpdateManyWithoutRedTeamNestedInput = {
    create?: XOR<MatchCreateWithoutRedTeamInput, MatchUncheckedCreateWithoutRedTeamInput> | MatchCreateWithoutRedTeamInput[] | MatchUncheckedCreateWithoutRedTeamInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutRedTeamInput | MatchCreateOrConnectWithoutRedTeamInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutRedTeamInput | MatchUpsertWithWhereUniqueWithoutRedTeamInput[]
    createMany?: MatchCreateManyRedTeamInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutRedTeamInput | MatchUpdateWithWhereUniqueWithoutRedTeamInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutRedTeamInput | MatchUpdateManyWithWhereWithoutRedTeamInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutBlueTeamNestedInput = {
    create?: XOR<MatchCreateWithoutBlueTeamInput, MatchUncheckedCreateWithoutBlueTeamInput> | MatchCreateWithoutBlueTeamInput[] | MatchUncheckedCreateWithoutBlueTeamInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutBlueTeamInput | MatchCreateOrConnectWithoutBlueTeamInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutBlueTeamInput | MatchUpsertWithWhereUniqueWithoutBlueTeamInput[]
    createMany?: MatchCreateManyBlueTeamInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutBlueTeamInput | MatchUpdateWithWhereUniqueWithoutBlueTeamInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutBlueTeamInput | MatchUpdateManyWithWhereWithoutBlueTeamInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutRedTeamNestedInput = {
    create?: XOR<MatchCreateWithoutRedTeamInput, MatchUncheckedCreateWithoutRedTeamInput> | MatchCreateWithoutRedTeamInput[] | MatchUncheckedCreateWithoutRedTeamInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutRedTeamInput | MatchCreateOrConnectWithoutRedTeamInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutRedTeamInput | MatchUpsertWithWhereUniqueWithoutRedTeamInput[]
    createMany?: MatchCreateManyRedTeamInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutRedTeamInput | MatchUpdateWithWhereUniqueWithoutRedTeamInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutRedTeamInput | MatchUpdateManyWithWhereWithoutRedTeamInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type LobbyCreateNestedOneWithoutMatchesInput = {
    create?: XOR<LobbyCreateWithoutMatchesInput, LobbyUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: LobbyCreateOrConnectWithoutMatchesInput
    connect?: LobbyWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutBlueMatchesInput = {
    create?: XOR<TeamCreateWithoutBlueMatchesInput, TeamUncheckedCreateWithoutBlueMatchesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutBlueMatchesInput
    connect?: TeamWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutRedMatchesInput = {
    create?: XOR<TeamCreateWithoutRedMatchesInput, TeamUncheckedCreateWithoutRedMatchesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutRedMatchesInput
    connect?: TeamWhereUniqueInput
  }

  export type EnumMatchStateFieldUpdateOperationsInput = {
    set?: $Enums.MatchState
  }

  export type LobbyUpdateOneRequiredWithoutMatchesNestedInput = {
    create?: XOR<LobbyCreateWithoutMatchesInput, LobbyUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: LobbyCreateOrConnectWithoutMatchesInput
    upsert?: LobbyUpsertWithoutMatchesInput
    connect?: LobbyWhereUniqueInput
    update?: XOR<XOR<LobbyUpdateToOneWithWhereWithoutMatchesInput, LobbyUpdateWithoutMatchesInput>, LobbyUncheckedUpdateWithoutMatchesInput>
  }

  export type TeamUpdateOneRequiredWithoutBlueMatchesNestedInput = {
    create?: XOR<TeamCreateWithoutBlueMatchesInput, TeamUncheckedCreateWithoutBlueMatchesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutBlueMatchesInput
    upsert?: TeamUpsertWithoutBlueMatchesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutBlueMatchesInput, TeamUpdateWithoutBlueMatchesInput>, TeamUncheckedUpdateWithoutBlueMatchesInput>
  }

  export type TeamUpdateOneRequiredWithoutRedMatchesNestedInput = {
    create?: XOR<TeamCreateWithoutRedMatchesInput, TeamUncheckedCreateWithoutRedMatchesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutRedMatchesInput
    upsert?: TeamUpsertWithoutRedMatchesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutRedMatchesInput, TeamUpdateWithoutRedMatchesInput>, TeamUncheckedUpdateWithoutRedMatchesInput>
  }

  export type UserProfileCreatepreferredRolesInput = {
    set: $Enums.RoleName[]
  }

  export type LobbyParticipantCreateNestedManyWithoutProfileInput = {
    create?: XOR<LobbyParticipantCreateWithoutProfileInput, LobbyParticipantUncheckedCreateWithoutProfileInput> | LobbyParticipantCreateWithoutProfileInput[] | LobbyParticipantUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: LobbyParticipantCreateOrConnectWithoutProfileInput | LobbyParticipantCreateOrConnectWithoutProfileInput[]
    createMany?: LobbyParticipantCreateManyProfileInputEnvelope
    connect?: LobbyParticipantWhereUniqueInput | LobbyParticipantWhereUniqueInput[]
  }

  export type PlayerStatsCreateNestedOneWithoutProfileInput = {
    create?: XOR<PlayerStatsCreateWithoutProfileInput, PlayerStatsUncheckedCreateWithoutProfileInput>
    connectOrCreate?: PlayerStatsCreateOrConnectWithoutProfileInput
    connect?: PlayerStatsWhereUniqueInput
  }

  export type LobbyParticipantUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<LobbyParticipantCreateWithoutProfileInput, LobbyParticipantUncheckedCreateWithoutProfileInput> | LobbyParticipantCreateWithoutProfileInput[] | LobbyParticipantUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: LobbyParticipantCreateOrConnectWithoutProfileInput | LobbyParticipantCreateOrConnectWithoutProfileInput[]
    createMany?: LobbyParticipantCreateManyProfileInputEnvelope
    connect?: LobbyParticipantWhereUniqueInput | LobbyParticipantWhereUniqueInput[]
  }

  export type PlayerStatsUncheckedCreateNestedOneWithoutProfileInput = {
    create?: XOR<PlayerStatsCreateWithoutProfileInput, PlayerStatsUncheckedCreateWithoutProfileInput>
    connectOrCreate?: PlayerStatsCreateOrConnectWithoutProfileInput
    connect?: PlayerStatsWhereUniqueInput
  }

  export type UserProfileUpdatepreferredRolesInput = {
    set?: $Enums.RoleName[]
    push?: $Enums.RoleName | $Enums.RoleName[]
  }

  export type NullableEnumLoLRegionFieldUpdateOperationsInput = {
    set?: $Enums.LoLRegion | null
  }

  export type LobbyParticipantUpdateManyWithoutProfileNestedInput = {
    create?: XOR<LobbyParticipantCreateWithoutProfileInput, LobbyParticipantUncheckedCreateWithoutProfileInput> | LobbyParticipantCreateWithoutProfileInput[] | LobbyParticipantUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: LobbyParticipantCreateOrConnectWithoutProfileInput | LobbyParticipantCreateOrConnectWithoutProfileInput[]
    upsert?: LobbyParticipantUpsertWithWhereUniqueWithoutProfileInput | LobbyParticipantUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: LobbyParticipantCreateManyProfileInputEnvelope
    set?: LobbyParticipantWhereUniqueInput | LobbyParticipantWhereUniqueInput[]
    disconnect?: LobbyParticipantWhereUniqueInput | LobbyParticipantWhereUniqueInput[]
    delete?: LobbyParticipantWhereUniqueInput | LobbyParticipantWhereUniqueInput[]
    connect?: LobbyParticipantWhereUniqueInput | LobbyParticipantWhereUniqueInput[]
    update?: LobbyParticipantUpdateWithWhereUniqueWithoutProfileInput | LobbyParticipantUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: LobbyParticipantUpdateManyWithWhereWithoutProfileInput | LobbyParticipantUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: LobbyParticipantScalarWhereInput | LobbyParticipantScalarWhereInput[]
  }

  export type PlayerStatsUpdateOneWithoutProfileNestedInput = {
    create?: XOR<PlayerStatsCreateWithoutProfileInput, PlayerStatsUncheckedCreateWithoutProfileInput>
    connectOrCreate?: PlayerStatsCreateOrConnectWithoutProfileInput
    upsert?: PlayerStatsUpsertWithoutProfileInput
    disconnect?: PlayerStatsWhereInput | boolean
    delete?: PlayerStatsWhereInput | boolean
    connect?: PlayerStatsWhereUniqueInput
    update?: XOR<XOR<PlayerStatsUpdateToOneWithWhereWithoutProfileInput, PlayerStatsUpdateWithoutProfileInput>, PlayerStatsUncheckedUpdateWithoutProfileInput>
  }

  export type LobbyParticipantUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<LobbyParticipantCreateWithoutProfileInput, LobbyParticipantUncheckedCreateWithoutProfileInput> | LobbyParticipantCreateWithoutProfileInput[] | LobbyParticipantUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: LobbyParticipantCreateOrConnectWithoutProfileInput | LobbyParticipantCreateOrConnectWithoutProfileInput[]
    upsert?: LobbyParticipantUpsertWithWhereUniqueWithoutProfileInput | LobbyParticipantUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: LobbyParticipantCreateManyProfileInputEnvelope
    set?: LobbyParticipantWhereUniqueInput | LobbyParticipantWhereUniqueInput[]
    disconnect?: LobbyParticipantWhereUniqueInput | LobbyParticipantWhereUniqueInput[]
    delete?: LobbyParticipantWhereUniqueInput | LobbyParticipantWhereUniqueInput[]
    connect?: LobbyParticipantWhereUniqueInput | LobbyParticipantWhereUniqueInput[]
    update?: LobbyParticipantUpdateWithWhereUniqueWithoutProfileInput | LobbyParticipantUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: LobbyParticipantUpdateManyWithWhereWithoutProfileInput | LobbyParticipantUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: LobbyParticipantScalarWhereInput | LobbyParticipantScalarWhereInput[]
  }

  export type PlayerStatsUncheckedUpdateOneWithoutProfileNestedInput = {
    create?: XOR<PlayerStatsCreateWithoutProfileInput, PlayerStatsUncheckedCreateWithoutProfileInput>
    connectOrCreate?: PlayerStatsCreateOrConnectWithoutProfileInput
    upsert?: PlayerStatsUpsertWithoutProfileInput
    disconnect?: PlayerStatsWhereInput | boolean
    delete?: PlayerStatsWhereInput | boolean
    connect?: PlayerStatsWhereUniqueInput
    update?: XOR<XOR<PlayerStatsUpdateToOneWithWhereWithoutProfileInput, PlayerStatsUpdateWithoutProfileInput>, PlayerStatsUncheckedUpdateWithoutProfileInput>
  }

  export type LobbyCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<LobbyCreateWithoutParticipantsInput, LobbyUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: LobbyCreateOrConnectWithoutParticipantsInput
    connect?: LobbyWhereUniqueInput
  }

  export type UserProfileCreateNestedOneWithoutParticipationsInput = {
    create?: XOR<UserProfileCreateWithoutParticipationsInput, UserProfileUncheckedCreateWithoutParticipationsInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutParticipationsInput
    connect?: UserProfileWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableEnumRoleNameFieldUpdateOperationsInput = {
    set?: $Enums.RoleName | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LobbyUpdateOneRequiredWithoutParticipantsNestedInput = {
    create?: XOR<LobbyCreateWithoutParticipantsInput, LobbyUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: LobbyCreateOrConnectWithoutParticipantsInput
    upsert?: LobbyUpsertWithoutParticipantsInput
    connect?: LobbyWhereUniqueInput
    update?: XOR<XOR<LobbyUpdateToOneWithWhereWithoutParticipantsInput, LobbyUpdateWithoutParticipantsInput>, LobbyUncheckedUpdateWithoutParticipantsInput>
  }

  export type UserProfileUpdateOneRequiredWithoutParticipationsNestedInput = {
    create?: XOR<UserProfileCreateWithoutParticipationsInput, UserProfileUncheckedCreateWithoutParticipationsInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutParticipationsInput
    upsert?: UserProfileUpsertWithoutParticipationsInput
    connect?: UserProfileWhereUniqueInput
    update?: XOR<XOR<UserProfileUpdateToOneWithWhereWithoutParticipationsInput, UserProfileUpdateWithoutParticipationsInput>, UserProfileUncheckedUpdateWithoutParticipationsInput>
  }

  export type UserProfileCreateNestedOneWithoutStatsInput = {
    create?: XOR<UserProfileCreateWithoutStatsInput, UserProfileUncheckedCreateWithoutStatsInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutStatsInput
    connect?: UserProfileWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserProfileUpdateOneRequiredWithoutStatsNestedInput = {
    create?: XOR<UserProfileCreateWithoutStatsInput, UserProfileUncheckedCreateWithoutStatsInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutStatsInput
    upsert?: UserProfileUpsertWithoutStatsInput
    connect?: UserProfileWhereUniqueInput
    update?: XOR<XOR<UserProfileUpdateToOneWithWhereWithoutStatsInput, UserProfileUpdateWithoutStatsInput>, UserProfileUncheckedUpdateWithoutStatsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumGameModeFilter<$PrismaModel = never> = {
    equals?: $Enums.GameMode | EnumGameModeFieldRefInput<$PrismaModel>
    in?: $Enums.GameMode[] | ListEnumGameModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameMode[] | ListEnumGameModeFieldRefInput<$PrismaModel>
    not?: NestedEnumGameModeFilter<$PrismaModel> | $Enums.GameMode
  }

  export type NestedEnumLobbyStateFilter<$PrismaModel = never> = {
    equals?: $Enums.LobbyState | EnumLobbyStateFieldRefInput<$PrismaModel>
    in?: $Enums.LobbyState[] | ListEnumLobbyStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.LobbyState[] | ListEnumLobbyStateFieldRefInput<$PrismaModel>
    not?: NestedEnumLobbyStateFilter<$PrismaModel> | $Enums.LobbyState
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumGameModeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GameMode | EnumGameModeFieldRefInput<$PrismaModel>
    in?: $Enums.GameMode[] | ListEnumGameModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameMode[] | ListEnumGameModeFieldRefInput<$PrismaModel>
    not?: NestedEnumGameModeWithAggregatesFilter<$PrismaModel> | $Enums.GameMode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGameModeFilter<$PrismaModel>
    _max?: NestedEnumGameModeFilter<$PrismaModel>
  }

  export type NestedEnumLobbyStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LobbyState | EnumLobbyStateFieldRefInput<$PrismaModel>
    in?: $Enums.LobbyState[] | ListEnumLobbyStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.LobbyState[] | ListEnumLobbyStateFieldRefInput<$PrismaModel>
    not?: NestedEnumLobbyStateWithAggregatesFilter<$PrismaModel> | $Enums.LobbyState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLobbyStateFilter<$PrismaModel>
    _max?: NestedEnumLobbyStateFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumMatchStateFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchState | EnumMatchStateFieldRefInput<$PrismaModel>
    in?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    not?: NestedEnumMatchStateFilter<$PrismaModel> | $Enums.MatchState
  }

  export type NestedEnumMatchStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchState | EnumMatchStateFieldRefInput<$PrismaModel>
    in?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    not?: NestedEnumMatchStateWithAggregatesFilter<$PrismaModel> | $Enums.MatchState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMatchStateFilter<$PrismaModel>
    _max?: NestedEnumMatchStateFilter<$PrismaModel>
  }

  export type NestedEnumLoLRegionNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.LoLRegion | EnumLoLRegionFieldRefInput<$PrismaModel> | null
    in?: $Enums.LoLRegion[] | ListEnumLoLRegionFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.LoLRegion[] | ListEnumLoLRegionFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLoLRegionNullableFilter<$PrismaModel> | $Enums.LoLRegion | null
  }

  export type NestedEnumLoLRegionNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LoLRegion | EnumLoLRegionFieldRefInput<$PrismaModel> | null
    in?: $Enums.LoLRegion[] | ListEnumLoLRegionFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.LoLRegion[] | ListEnumLoLRegionFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLoLRegionNullableWithAggregatesFilter<$PrismaModel> | $Enums.LoLRegion | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumLoLRegionNullableFilter<$PrismaModel>
    _max?: NestedEnumLoLRegionNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumRoleNameNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleName | EnumRoleNameFieldRefInput<$PrismaModel> | null
    in?: $Enums.RoleName[] | ListEnumRoleNameFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RoleName[] | ListEnumRoleNameFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleNameNullableFilter<$PrismaModel> | $Enums.RoleName | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumRoleNameNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleName | EnumRoleNameFieldRefInput<$PrismaModel> | null
    in?: $Enums.RoleName[] | ListEnumRoleNameFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RoleName[] | ListEnumRoleNameFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRoleNameNullableWithAggregatesFilter<$PrismaModel> | $Enums.RoleName | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumRoleNameNullableFilter<$PrismaModel>
    _max?: NestedEnumRoleNameNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type LobbyParticipantCreateWithoutLobbyInput = {
    id?: string
    isCaptain?: boolean
    isSub?: boolean
    selectedRole?: $Enums.RoleName | null
    teamNumber?: number | null
    profile: UserProfileCreateNestedOneWithoutParticipationsInput
  }

  export type LobbyParticipantUncheckedCreateWithoutLobbyInput = {
    id?: string
    userId: string
    isCaptain?: boolean
    isSub?: boolean
    selectedRole?: $Enums.RoleName | null
    teamNumber?: number | null
  }

  export type LobbyParticipantCreateOrConnectWithoutLobbyInput = {
    where: LobbyParticipantWhereUniqueInput
    create: XOR<LobbyParticipantCreateWithoutLobbyInput, LobbyParticipantUncheckedCreateWithoutLobbyInput>
  }

  export type LobbyParticipantCreateManyLobbyInputEnvelope = {
    data: LobbyParticipantCreateManyLobbyInput | LobbyParticipantCreateManyLobbyInput[]
    skipDuplicates?: boolean
  }

  export type TeamCreateWithoutLobbyInput = {
    id?: string
    number: number
    name: string
    roleId?: string | null
    textChannelId?: string | null
    voiceChannelId?: string | null
    blueMatches?: MatchCreateNestedManyWithoutBlueTeamInput
    redMatches?: MatchCreateNestedManyWithoutRedTeamInput
  }

  export type TeamUncheckedCreateWithoutLobbyInput = {
    id?: string
    number: number
    name: string
    roleId?: string | null
    textChannelId?: string | null
    voiceChannelId?: string | null
    blueMatches?: MatchUncheckedCreateNestedManyWithoutBlueTeamInput
    redMatches?: MatchUncheckedCreateNestedManyWithoutRedTeamInput
  }

  export type TeamCreateOrConnectWithoutLobbyInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutLobbyInput, TeamUncheckedCreateWithoutLobbyInput>
  }

  export type TeamCreateManyLobbyInputEnvelope = {
    data: TeamCreateManyLobbyInput | TeamCreateManyLobbyInput[]
    skipDuplicates?: boolean
  }

  export type MatchCreateWithoutLobbyInput = {
    id?: string
    round: number
    indexInRound: number
    draftBlueUrl?: string | null
    draftRedUrl?: string | null
    specUrl?: string | null
    state?: $Enums.MatchState
    winnerTeamId?: string | null
    blueTeam: TeamCreateNestedOneWithoutBlueMatchesInput
    redTeam: TeamCreateNestedOneWithoutRedMatchesInput
  }

  export type MatchUncheckedCreateWithoutLobbyInput = {
    id?: string
    round: number
    indexInRound: number
    blueTeamId: string
    redTeamId: string
    draftBlueUrl?: string | null
    draftRedUrl?: string | null
    specUrl?: string | null
    state?: $Enums.MatchState
    winnerTeamId?: string | null
  }

  export type MatchCreateOrConnectWithoutLobbyInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutLobbyInput, MatchUncheckedCreateWithoutLobbyInput>
  }

  export type MatchCreateManyLobbyInputEnvelope = {
    data: MatchCreateManyLobbyInput | MatchCreateManyLobbyInput[]
    skipDuplicates?: boolean
  }

  export type LobbyParticipantUpsertWithWhereUniqueWithoutLobbyInput = {
    where: LobbyParticipantWhereUniqueInput
    update: XOR<LobbyParticipantUpdateWithoutLobbyInput, LobbyParticipantUncheckedUpdateWithoutLobbyInput>
    create: XOR<LobbyParticipantCreateWithoutLobbyInput, LobbyParticipantUncheckedCreateWithoutLobbyInput>
  }

  export type LobbyParticipantUpdateWithWhereUniqueWithoutLobbyInput = {
    where: LobbyParticipantWhereUniqueInput
    data: XOR<LobbyParticipantUpdateWithoutLobbyInput, LobbyParticipantUncheckedUpdateWithoutLobbyInput>
  }

  export type LobbyParticipantUpdateManyWithWhereWithoutLobbyInput = {
    where: LobbyParticipantScalarWhereInput
    data: XOR<LobbyParticipantUpdateManyMutationInput, LobbyParticipantUncheckedUpdateManyWithoutLobbyInput>
  }

  export type LobbyParticipantScalarWhereInput = {
    AND?: LobbyParticipantScalarWhereInput | LobbyParticipantScalarWhereInput[]
    OR?: LobbyParticipantScalarWhereInput[]
    NOT?: LobbyParticipantScalarWhereInput | LobbyParticipantScalarWhereInput[]
    id?: StringFilter<"LobbyParticipant"> | string
    lobbyId?: StringFilter<"LobbyParticipant"> | string
    userId?: StringFilter<"LobbyParticipant"> | string
    isCaptain?: BoolFilter<"LobbyParticipant"> | boolean
    isSub?: BoolFilter<"LobbyParticipant"> | boolean
    selectedRole?: EnumRoleNameNullableFilter<"LobbyParticipant"> | $Enums.RoleName | null
    teamNumber?: IntNullableFilter<"LobbyParticipant"> | number | null
  }

  export type TeamUpsertWithWhereUniqueWithoutLobbyInput = {
    where: TeamWhereUniqueInput
    update: XOR<TeamUpdateWithoutLobbyInput, TeamUncheckedUpdateWithoutLobbyInput>
    create: XOR<TeamCreateWithoutLobbyInput, TeamUncheckedCreateWithoutLobbyInput>
  }

  export type TeamUpdateWithWhereUniqueWithoutLobbyInput = {
    where: TeamWhereUniqueInput
    data: XOR<TeamUpdateWithoutLobbyInput, TeamUncheckedUpdateWithoutLobbyInput>
  }

  export type TeamUpdateManyWithWhereWithoutLobbyInput = {
    where: TeamScalarWhereInput
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyWithoutLobbyInput>
  }

  export type TeamScalarWhereInput = {
    AND?: TeamScalarWhereInput | TeamScalarWhereInput[]
    OR?: TeamScalarWhereInput[]
    NOT?: TeamScalarWhereInput | TeamScalarWhereInput[]
    id?: StringFilter<"Team"> | string
    lobbyId?: StringFilter<"Team"> | string
    number?: IntFilter<"Team"> | number
    name?: StringFilter<"Team"> | string
    roleId?: StringNullableFilter<"Team"> | string | null
    textChannelId?: StringNullableFilter<"Team"> | string | null
    voiceChannelId?: StringNullableFilter<"Team"> | string | null
  }

  export type MatchUpsertWithWhereUniqueWithoutLobbyInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutLobbyInput, MatchUncheckedUpdateWithoutLobbyInput>
    create: XOR<MatchCreateWithoutLobbyInput, MatchUncheckedCreateWithoutLobbyInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutLobbyInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutLobbyInput, MatchUncheckedUpdateWithoutLobbyInput>
  }

  export type MatchUpdateManyWithWhereWithoutLobbyInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutLobbyInput>
  }

  export type MatchScalarWhereInput = {
    AND?: MatchScalarWhereInput | MatchScalarWhereInput[]
    OR?: MatchScalarWhereInput[]
    NOT?: MatchScalarWhereInput | MatchScalarWhereInput[]
    id?: StringFilter<"Match"> | string
    lobbyId?: StringFilter<"Match"> | string
    round?: IntFilter<"Match"> | number
    indexInRound?: IntFilter<"Match"> | number
    blueTeamId?: StringFilter<"Match"> | string
    redTeamId?: StringFilter<"Match"> | string
    draftBlueUrl?: StringNullableFilter<"Match"> | string | null
    draftRedUrl?: StringNullableFilter<"Match"> | string | null
    specUrl?: StringNullableFilter<"Match"> | string | null
    state?: EnumMatchStateFilter<"Match"> | $Enums.MatchState
    winnerTeamId?: StringNullableFilter<"Match"> | string | null
  }

  export type LobbyCreateWithoutTeamsInput = {
    id?: string
    guildId: string
    channelId: string
    messageId?: string | null
    name: string
    slots: number
    mode: $Enums.GameMode
    state?: $Enums.LobbyState
    createdBy: string
    currentRound?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: LobbyParticipantCreateNestedManyWithoutLobbyInput
    matches?: MatchCreateNestedManyWithoutLobbyInput
  }

  export type LobbyUncheckedCreateWithoutTeamsInput = {
    id?: string
    guildId: string
    channelId: string
    messageId?: string | null
    name: string
    slots: number
    mode: $Enums.GameMode
    state?: $Enums.LobbyState
    createdBy: string
    currentRound?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: LobbyParticipantUncheckedCreateNestedManyWithoutLobbyInput
    matches?: MatchUncheckedCreateNestedManyWithoutLobbyInput
  }

  export type LobbyCreateOrConnectWithoutTeamsInput = {
    where: LobbyWhereUniqueInput
    create: XOR<LobbyCreateWithoutTeamsInput, LobbyUncheckedCreateWithoutTeamsInput>
  }

  export type MatchCreateWithoutBlueTeamInput = {
    id?: string
    round: number
    indexInRound: number
    draftBlueUrl?: string | null
    draftRedUrl?: string | null
    specUrl?: string | null
    state?: $Enums.MatchState
    winnerTeamId?: string | null
    lobby: LobbyCreateNestedOneWithoutMatchesInput
    redTeam: TeamCreateNestedOneWithoutRedMatchesInput
  }

  export type MatchUncheckedCreateWithoutBlueTeamInput = {
    id?: string
    lobbyId: string
    round: number
    indexInRound: number
    redTeamId: string
    draftBlueUrl?: string | null
    draftRedUrl?: string | null
    specUrl?: string | null
    state?: $Enums.MatchState
    winnerTeamId?: string | null
  }

  export type MatchCreateOrConnectWithoutBlueTeamInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutBlueTeamInput, MatchUncheckedCreateWithoutBlueTeamInput>
  }

  export type MatchCreateManyBlueTeamInputEnvelope = {
    data: MatchCreateManyBlueTeamInput | MatchCreateManyBlueTeamInput[]
    skipDuplicates?: boolean
  }

  export type MatchCreateWithoutRedTeamInput = {
    id?: string
    round: number
    indexInRound: number
    draftBlueUrl?: string | null
    draftRedUrl?: string | null
    specUrl?: string | null
    state?: $Enums.MatchState
    winnerTeamId?: string | null
    lobby: LobbyCreateNestedOneWithoutMatchesInput
    blueTeam: TeamCreateNestedOneWithoutBlueMatchesInput
  }

  export type MatchUncheckedCreateWithoutRedTeamInput = {
    id?: string
    lobbyId: string
    round: number
    indexInRound: number
    blueTeamId: string
    draftBlueUrl?: string | null
    draftRedUrl?: string | null
    specUrl?: string | null
    state?: $Enums.MatchState
    winnerTeamId?: string | null
  }

  export type MatchCreateOrConnectWithoutRedTeamInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutRedTeamInput, MatchUncheckedCreateWithoutRedTeamInput>
  }

  export type MatchCreateManyRedTeamInputEnvelope = {
    data: MatchCreateManyRedTeamInput | MatchCreateManyRedTeamInput[]
    skipDuplicates?: boolean
  }

  export type LobbyUpsertWithoutTeamsInput = {
    update: XOR<LobbyUpdateWithoutTeamsInput, LobbyUncheckedUpdateWithoutTeamsInput>
    create: XOR<LobbyCreateWithoutTeamsInput, LobbyUncheckedCreateWithoutTeamsInput>
    where?: LobbyWhereInput
  }

  export type LobbyUpdateToOneWithWhereWithoutTeamsInput = {
    where?: LobbyWhereInput
    data: XOR<LobbyUpdateWithoutTeamsInput, LobbyUncheckedUpdateWithoutTeamsInput>
  }

  export type LobbyUpdateWithoutTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    slots?: IntFieldUpdateOperationsInput | number
    mode?: EnumGameModeFieldUpdateOperationsInput | $Enums.GameMode
    state?: EnumLobbyStateFieldUpdateOperationsInput | $Enums.LobbyState
    createdBy?: StringFieldUpdateOperationsInput | string
    currentRound?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: LobbyParticipantUpdateManyWithoutLobbyNestedInput
    matches?: MatchUpdateManyWithoutLobbyNestedInput
  }

  export type LobbyUncheckedUpdateWithoutTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    slots?: IntFieldUpdateOperationsInput | number
    mode?: EnumGameModeFieldUpdateOperationsInput | $Enums.GameMode
    state?: EnumLobbyStateFieldUpdateOperationsInput | $Enums.LobbyState
    createdBy?: StringFieldUpdateOperationsInput | string
    currentRound?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: LobbyParticipantUncheckedUpdateManyWithoutLobbyNestedInput
    matches?: MatchUncheckedUpdateManyWithoutLobbyNestedInput
  }

  export type MatchUpsertWithWhereUniqueWithoutBlueTeamInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutBlueTeamInput, MatchUncheckedUpdateWithoutBlueTeamInput>
    create: XOR<MatchCreateWithoutBlueTeamInput, MatchUncheckedCreateWithoutBlueTeamInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutBlueTeamInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutBlueTeamInput, MatchUncheckedUpdateWithoutBlueTeamInput>
  }

  export type MatchUpdateManyWithWhereWithoutBlueTeamInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutBlueTeamInput>
  }

  export type MatchUpsertWithWhereUniqueWithoutRedTeamInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutRedTeamInput, MatchUncheckedUpdateWithoutRedTeamInput>
    create: XOR<MatchCreateWithoutRedTeamInput, MatchUncheckedCreateWithoutRedTeamInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutRedTeamInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutRedTeamInput, MatchUncheckedUpdateWithoutRedTeamInput>
  }

  export type MatchUpdateManyWithWhereWithoutRedTeamInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutRedTeamInput>
  }

  export type LobbyCreateWithoutMatchesInput = {
    id?: string
    guildId: string
    channelId: string
    messageId?: string | null
    name: string
    slots: number
    mode: $Enums.GameMode
    state?: $Enums.LobbyState
    createdBy: string
    currentRound?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: LobbyParticipantCreateNestedManyWithoutLobbyInput
    teams?: TeamCreateNestedManyWithoutLobbyInput
  }

  export type LobbyUncheckedCreateWithoutMatchesInput = {
    id?: string
    guildId: string
    channelId: string
    messageId?: string | null
    name: string
    slots: number
    mode: $Enums.GameMode
    state?: $Enums.LobbyState
    createdBy: string
    currentRound?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: LobbyParticipantUncheckedCreateNestedManyWithoutLobbyInput
    teams?: TeamUncheckedCreateNestedManyWithoutLobbyInput
  }

  export type LobbyCreateOrConnectWithoutMatchesInput = {
    where: LobbyWhereUniqueInput
    create: XOR<LobbyCreateWithoutMatchesInput, LobbyUncheckedCreateWithoutMatchesInput>
  }

  export type TeamCreateWithoutBlueMatchesInput = {
    id?: string
    number: number
    name: string
    roleId?: string | null
    textChannelId?: string | null
    voiceChannelId?: string | null
    lobby: LobbyCreateNestedOneWithoutTeamsInput
    redMatches?: MatchCreateNestedManyWithoutRedTeamInput
  }

  export type TeamUncheckedCreateWithoutBlueMatchesInput = {
    id?: string
    lobbyId: string
    number: number
    name: string
    roleId?: string | null
    textChannelId?: string | null
    voiceChannelId?: string | null
    redMatches?: MatchUncheckedCreateNestedManyWithoutRedTeamInput
  }

  export type TeamCreateOrConnectWithoutBlueMatchesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutBlueMatchesInput, TeamUncheckedCreateWithoutBlueMatchesInput>
  }

  export type TeamCreateWithoutRedMatchesInput = {
    id?: string
    number: number
    name: string
    roleId?: string | null
    textChannelId?: string | null
    voiceChannelId?: string | null
    lobby: LobbyCreateNestedOneWithoutTeamsInput
    blueMatches?: MatchCreateNestedManyWithoutBlueTeamInput
  }

  export type TeamUncheckedCreateWithoutRedMatchesInput = {
    id?: string
    lobbyId: string
    number: number
    name: string
    roleId?: string | null
    textChannelId?: string | null
    voiceChannelId?: string | null
    blueMatches?: MatchUncheckedCreateNestedManyWithoutBlueTeamInput
  }

  export type TeamCreateOrConnectWithoutRedMatchesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutRedMatchesInput, TeamUncheckedCreateWithoutRedMatchesInput>
  }

  export type LobbyUpsertWithoutMatchesInput = {
    update: XOR<LobbyUpdateWithoutMatchesInput, LobbyUncheckedUpdateWithoutMatchesInput>
    create: XOR<LobbyCreateWithoutMatchesInput, LobbyUncheckedCreateWithoutMatchesInput>
    where?: LobbyWhereInput
  }

  export type LobbyUpdateToOneWithWhereWithoutMatchesInput = {
    where?: LobbyWhereInput
    data: XOR<LobbyUpdateWithoutMatchesInput, LobbyUncheckedUpdateWithoutMatchesInput>
  }

  export type LobbyUpdateWithoutMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    slots?: IntFieldUpdateOperationsInput | number
    mode?: EnumGameModeFieldUpdateOperationsInput | $Enums.GameMode
    state?: EnumLobbyStateFieldUpdateOperationsInput | $Enums.LobbyState
    createdBy?: StringFieldUpdateOperationsInput | string
    currentRound?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: LobbyParticipantUpdateManyWithoutLobbyNestedInput
    teams?: TeamUpdateManyWithoutLobbyNestedInput
  }

  export type LobbyUncheckedUpdateWithoutMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    slots?: IntFieldUpdateOperationsInput | number
    mode?: EnumGameModeFieldUpdateOperationsInput | $Enums.GameMode
    state?: EnumLobbyStateFieldUpdateOperationsInput | $Enums.LobbyState
    createdBy?: StringFieldUpdateOperationsInput | string
    currentRound?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: LobbyParticipantUncheckedUpdateManyWithoutLobbyNestedInput
    teams?: TeamUncheckedUpdateManyWithoutLobbyNestedInput
  }

  export type TeamUpsertWithoutBlueMatchesInput = {
    update: XOR<TeamUpdateWithoutBlueMatchesInput, TeamUncheckedUpdateWithoutBlueMatchesInput>
    create: XOR<TeamCreateWithoutBlueMatchesInput, TeamUncheckedCreateWithoutBlueMatchesInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutBlueMatchesInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutBlueMatchesInput, TeamUncheckedUpdateWithoutBlueMatchesInput>
  }

  export type TeamUpdateWithoutBlueMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    textChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    voiceChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    lobby?: LobbyUpdateOneRequiredWithoutTeamsNestedInput
    redMatches?: MatchUpdateManyWithoutRedTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutBlueMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    lobbyId?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    textChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    voiceChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    redMatches?: MatchUncheckedUpdateManyWithoutRedTeamNestedInput
  }

  export type TeamUpsertWithoutRedMatchesInput = {
    update: XOR<TeamUpdateWithoutRedMatchesInput, TeamUncheckedUpdateWithoutRedMatchesInput>
    create: XOR<TeamCreateWithoutRedMatchesInput, TeamUncheckedCreateWithoutRedMatchesInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutRedMatchesInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutRedMatchesInput, TeamUncheckedUpdateWithoutRedMatchesInput>
  }

  export type TeamUpdateWithoutRedMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    textChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    voiceChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    lobby?: LobbyUpdateOneRequiredWithoutTeamsNestedInput
    blueMatches?: MatchUpdateManyWithoutBlueTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutRedMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    lobbyId?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    textChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    voiceChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    blueMatches?: MatchUncheckedUpdateManyWithoutBlueTeamNestedInput
  }

  export type LobbyParticipantCreateWithoutProfileInput = {
    id?: string
    isCaptain?: boolean
    isSub?: boolean
    selectedRole?: $Enums.RoleName | null
    teamNumber?: number | null
    lobby: LobbyCreateNestedOneWithoutParticipantsInput
  }

  export type LobbyParticipantUncheckedCreateWithoutProfileInput = {
    id?: string
    lobbyId: string
    isCaptain?: boolean
    isSub?: boolean
    selectedRole?: $Enums.RoleName | null
    teamNumber?: number | null
  }

  export type LobbyParticipantCreateOrConnectWithoutProfileInput = {
    where: LobbyParticipantWhereUniqueInput
    create: XOR<LobbyParticipantCreateWithoutProfileInput, LobbyParticipantUncheckedCreateWithoutProfileInput>
  }

  export type LobbyParticipantCreateManyProfileInputEnvelope = {
    data: LobbyParticipantCreateManyProfileInput | LobbyParticipantCreateManyProfileInput[]
    skipDuplicates?: boolean
  }

  export type PlayerStatsCreateWithoutProfileInput = {
    id?: string
    dpmAvg?: number | null
    csmAvg?: number | null
    kdaAvg?: number | null
  }

  export type PlayerStatsUncheckedCreateWithoutProfileInput = {
    id?: string
    dpmAvg?: number | null
    csmAvg?: number | null
    kdaAvg?: number | null
  }

  export type PlayerStatsCreateOrConnectWithoutProfileInput = {
    where: PlayerStatsWhereUniqueInput
    create: XOR<PlayerStatsCreateWithoutProfileInput, PlayerStatsUncheckedCreateWithoutProfileInput>
  }

  export type LobbyParticipantUpsertWithWhereUniqueWithoutProfileInput = {
    where: LobbyParticipantWhereUniqueInput
    update: XOR<LobbyParticipantUpdateWithoutProfileInput, LobbyParticipantUncheckedUpdateWithoutProfileInput>
    create: XOR<LobbyParticipantCreateWithoutProfileInput, LobbyParticipantUncheckedCreateWithoutProfileInput>
  }

  export type LobbyParticipantUpdateWithWhereUniqueWithoutProfileInput = {
    where: LobbyParticipantWhereUniqueInput
    data: XOR<LobbyParticipantUpdateWithoutProfileInput, LobbyParticipantUncheckedUpdateWithoutProfileInput>
  }

  export type LobbyParticipantUpdateManyWithWhereWithoutProfileInput = {
    where: LobbyParticipantScalarWhereInput
    data: XOR<LobbyParticipantUpdateManyMutationInput, LobbyParticipantUncheckedUpdateManyWithoutProfileInput>
  }

  export type PlayerStatsUpsertWithoutProfileInput = {
    update: XOR<PlayerStatsUpdateWithoutProfileInput, PlayerStatsUncheckedUpdateWithoutProfileInput>
    create: XOR<PlayerStatsCreateWithoutProfileInput, PlayerStatsUncheckedCreateWithoutProfileInput>
    where?: PlayerStatsWhereInput
  }

  export type PlayerStatsUpdateToOneWithWhereWithoutProfileInput = {
    where?: PlayerStatsWhereInput
    data: XOR<PlayerStatsUpdateWithoutProfileInput, PlayerStatsUncheckedUpdateWithoutProfileInput>
  }

  export type PlayerStatsUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    dpmAvg?: NullableFloatFieldUpdateOperationsInput | number | null
    csmAvg?: NullableFloatFieldUpdateOperationsInput | number | null
    kdaAvg?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PlayerStatsUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    dpmAvg?: NullableFloatFieldUpdateOperationsInput | number | null
    csmAvg?: NullableFloatFieldUpdateOperationsInput | number | null
    kdaAvg?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type LobbyCreateWithoutParticipantsInput = {
    id?: string
    guildId: string
    channelId: string
    messageId?: string | null
    name: string
    slots: number
    mode: $Enums.GameMode
    state?: $Enums.LobbyState
    createdBy: string
    currentRound?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    teams?: TeamCreateNestedManyWithoutLobbyInput
    matches?: MatchCreateNestedManyWithoutLobbyInput
  }

  export type LobbyUncheckedCreateWithoutParticipantsInput = {
    id?: string
    guildId: string
    channelId: string
    messageId?: string | null
    name: string
    slots: number
    mode: $Enums.GameMode
    state?: $Enums.LobbyState
    createdBy: string
    currentRound?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    teams?: TeamUncheckedCreateNestedManyWithoutLobbyInput
    matches?: MatchUncheckedCreateNestedManyWithoutLobbyInput
  }

  export type LobbyCreateOrConnectWithoutParticipantsInput = {
    where: LobbyWhereUniqueInput
    create: XOR<LobbyCreateWithoutParticipantsInput, LobbyUncheckedCreateWithoutParticipantsInput>
  }

  export type UserProfileCreateWithoutParticipationsInput = {
    id?: string
    discordUserId: string
    summonerName?: string | null
    preferredRoles?: UserProfileCreatepreferredRolesInput | $Enums.RoleName[]
    opggUrl?: string | null
    dpmUrl?: string | null
    region?: $Enums.LoLRegion | null
    createdAt?: Date | string
    updatedAt?: Date | string
    stats?: PlayerStatsCreateNestedOneWithoutProfileInput
  }

  export type UserProfileUncheckedCreateWithoutParticipationsInput = {
    id?: string
    discordUserId: string
    summonerName?: string | null
    preferredRoles?: UserProfileCreatepreferredRolesInput | $Enums.RoleName[]
    opggUrl?: string | null
    dpmUrl?: string | null
    region?: $Enums.LoLRegion | null
    createdAt?: Date | string
    updatedAt?: Date | string
    stats?: PlayerStatsUncheckedCreateNestedOneWithoutProfileInput
  }

  export type UserProfileCreateOrConnectWithoutParticipationsInput = {
    where: UserProfileWhereUniqueInput
    create: XOR<UserProfileCreateWithoutParticipationsInput, UserProfileUncheckedCreateWithoutParticipationsInput>
  }

  export type LobbyUpsertWithoutParticipantsInput = {
    update: XOR<LobbyUpdateWithoutParticipantsInput, LobbyUncheckedUpdateWithoutParticipantsInput>
    create: XOR<LobbyCreateWithoutParticipantsInput, LobbyUncheckedCreateWithoutParticipantsInput>
    where?: LobbyWhereInput
  }

  export type LobbyUpdateToOneWithWhereWithoutParticipantsInput = {
    where?: LobbyWhereInput
    data: XOR<LobbyUpdateWithoutParticipantsInput, LobbyUncheckedUpdateWithoutParticipantsInput>
  }

  export type LobbyUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    slots?: IntFieldUpdateOperationsInput | number
    mode?: EnumGameModeFieldUpdateOperationsInput | $Enums.GameMode
    state?: EnumLobbyStateFieldUpdateOperationsInput | $Enums.LobbyState
    createdBy?: StringFieldUpdateOperationsInput | string
    currentRound?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamUpdateManyWithoutLobbyNestedInput
    matches?: MatchUpdateManyWithoutLobbyNestedInput
  }

  export type LobbyUncheckedUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    guildId?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    slots?: IntFieldUpdateOperationsInput | number
    mode?: EnumGameModeFieldUpdateOperationsInput | $Enums.GameMode
    state?: EnumLobbyStateFieldUpdateOperationsInput | $Enums.LobbyState
    createdBy?: StringFieldUpdateOperationsInput | string
    currentRound?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teams?: TeamUncheckedUpdateManyWithoutLobbyNestedInput
    matches?: MatchUncheckedUpdateManyWithoutLobbyNestedInput
  }

  export type UserProfileUpsertWithoutParticipationsInput = {
    update: XOR<UserProfileUpdateWithoutParticipationsInput, UserProfileUncheckedUpdateWithoutParticipationsInput>
    create: XOR<UserProfileCreateWithoutParticipationsInput, UserProfileUncheckedCreateWithoutParticipationsInput>
    where?: UserProfileWhereInput
  }

  export type UserProfileUpdateToOneWithWhereWithoutParticipationsInput = {
    where?: UserProfileWhereInput
    data: XOR<UserProfileUpdateWithoutParticipationsInput, UserProfileUncheckedUpdateWithoutParticipationsInput>
  }

  export type UserProfileUpdateWithoutParticipationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordUserId?: StringFieldUpdateOperationsInput | string
    summonerName?: NullableStringFieldUpdateOperationsInput | string | null
    preferredRoles?: UserProfileUpdatepreferredRolesInput | $Enums.RoleName[]
    opggUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dpmUrl?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableEnumLoLRegionFieldUpdateOperationsInput | $Enums.LoLRegion | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stats?: PlayerStatsUpdateOneWithoutProfileNestedInput
  }

  export type UserProfileUncheckedUpdateWithoutParticipationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordUserId?: StringFieldUpdateOperationsInput | string
    summonerName?: NullableStringFieldUpdateOperationsInput | string | null
    preferredRoles?: UserProfileUpdatepreferredRolesInput | $Enums.RoleName[]
    opggUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dpmUrl?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableEnumLoLRegionFieldUpdateOperationsInput | $Enums.LoLRegion | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stats?: PlayerStatsUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type UserProfileCreateWithoutStatsInput = {
    id?: string
    discordUserId: string
    summonerName?: string | null
    preferredRoles?: UserProfileCreatepreferredRolesInput | $Enums.RoleName[]
    opggUrl?: string | null
    dpmUrl?: string | null
    region?: $Enums.LoLRegion | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participations?: LobbyParticipantCreateNestedManyWithoutProfileInput
  }

  export type UserProfileUncheckedCreateWithoutStatsInput = {
    id?: string
    discordUserId: string
    summonerName?: string | null
    preferredRoles?: UserProfileCreatepreferredRolesInput | $Enums.RoleName[]
    opggUrl?: string | null
    dpmUrl?: string | null
    region?: $Enums.LoLRegion | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participations?: LobbyParticipantUncheckedCreateNestedManyWithoutProfileInput
  }

  export type UserProfileCreateOrConnectWithoutStatsInput = {
    where: UserProfileWhereUniqueInput
    create: XOR<UserProfileCreateWithoutStatsInput, UserProfileUncheckedCreateWithoutStatsInput>
  }

  export type UserProfileUpsertWithoutStatsInput = {
    update: XOR<UserProfileUpdateWithoutStatsInput, UserProfileUncheckedUpdateWithoutStatsInput>
    create: XOR<UserProfileCreateWithoutStatsInput, UserProfileUncheckedCreateWithoutStatsInput>
    where?: UserProfileWhereInput
  }

  export type UserProfileUpdateToOneWithWhereWithoutStatsInput = {
    where?: UserProfileWhereInput
    data: XOR<UserProfileUpdateWithoutStatsInput, UserProfileUncheckedUpdateWithoutStatsInput>
  }

  export type UserProfileUpdateWithoutStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordUserId?: StringFieldUpdateOperationsInput | string
    summonerName?: NullableStringFieldUpdateOperationsInput | string | null
    preferredRoles?: UserProfileUpdatepreferredRolesInput | $Enums.RoleName[]
    opggUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dpmUrl?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableEnumLoLRegionFieldUpdateOperationsInput | $Enums.LoLRegion | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participations?: LobbyParticipantUpdateManyWithoutProfileNestedInput
  }

  export type UserProfileUncheckedUpdateWithoutStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    discordUserId?: StringFieldUpdateOperationsInput | string
    summonerName?: NullableStringFieldUpdateOperationsInput | string | null
    preferredRoles?: UserProfileUpdatepreferredRolesInput | $Enums.RoleName[]
    opggUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dpmUrl?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableEnumLoLRegionFieldUpdateOperationsInput | $Enums.LoLRegion | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participations?: LobbyParticipantUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type LobbyParticipantCreateManyLobbyInput = {
    id?: string
    userId: string
    isCaptain?: boolean
    isSub?: boolean
    selectedRole?: $Enums.RoleName | null
    teamNumber?: number | null
  }

  export type TeamCreateManyLobbyInput = {
    id?: string
    number: number
    name: string
    roleId?: string | null
    textChannelId?: string | null
    voiceChannelId?: string | null
  }

  export type MatchCreateManyLobbyInput = {
    id?: string
    round: number
    indexInRound: number
    blueTeamId: string
    redTeamId: string
    draftBlueUrl?: string | null
    draftRedUrl?: string | null
    specUrl?: string | null
    state?: $Enums.MatchState
    winnerTeamId?: string | null
  }

  export type LobbyParticipantUpdateWithoutLobbyInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isSub?: BoolFieldUpdateOperationsInput | boolean
    selectedRole?: NullableEnumRoleNameFieldUpdateOperationsInput | $Enums.RoleName | null
    teamNumber?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: UserProfileUpdateOneRequiredWithoutParticipationsNestedInput
  }

  export type LobbyParticipantUncheckedUpdateWithoutLobbyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isSub?: BoolFieldUpdateOperationsInput | boolean
    selectedRole?: NullableEnumRoleNameFieldUpdateOperationsInput | $Enums.RoleName | null
    teamNumber?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LobbyParticipantUncheckedUpdateManyWithoutLobbyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isSub?: BoolFieldUpdateOperationsInput | boolean
    selectedRole?: NullableEnumRoleNameFieldUpdateOperationsInput | $Enums.RoleName | null
    teamNumber?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamUpdateWithoutLobbyInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    textChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    voiceChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    blueMatches?: MatchUpdateManyWithoutBlueTeamNestedInput
    redMatches?: MatchUpdateManyWithoutRedTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutLobbyInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    textChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    voiceChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    blueMatches?: MatchUncheckedUpdateManyWithoutBlueTeamNestedInput
    redMatches?: MatchUncheckedUpdateManyWithoutRedTeamNestedInput
  }

  export type TeamUncheckedUpdateManyWithoutLobbyInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    textChannelId?: NullableStringFieldUpdateOperationsInput | string | null
    voiceChannelId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MatchUpdateWithoutLobbyInput = {
    id?: StringFieldUpdateOperationsInput | string
    round?: IntFieldUpdateOperationsInput | number
    indexInRound?: IntFieldUpdateOperationsInput | number
    draftBlueUrl?: NullableStringFieldUpdateOperationsInput | string | null
    draftRedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    specUrl?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    winnerTeamId?: NullableStringFieldUpdateOperationsInput | string | null
    blueTeam?: TeamUpdateOneRequiredWithoutBlueMatchesNestedInput
    redTeam?: TeamUpdateOneRequiredWithoutRedMatchesNestedInput
  }

  export type MatchUncheckedUpdateWithoutLobbyInput = {
    id?: StringFieldUpdateOperationsInput | string
    round?: IntFieldUpdateOperationsInput | number
    indexInRound?: IntFieldUpdateOperationsInput | number
    blueTeamId?: StringFieldUpdateOperationsInput | string
    redTeamId?: StringFieldUpdateOperationsInput | string
    draftBlueUrl?: NullableStringFieldUpdateOperationsInput | string | null
    draftRedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    specUrl?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    winnerTeamId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MatchUncheckedUpdateManyWithoutLobbyInput = {
    id?: StringFieldUpdateOperationsInput | string
    round?: IntFieldUpdateOperationsInput | number
    indexInRound?: IntFieldUpdateOperationsInput | number
    blueTeamId?: StringFieldUpdateOperationsInput | string
    redTeamId?: StringFieldUpdateOperationsInput | string
    draftBlueUrl?: NullableStringFieldUpdateOperationsInput | string | null
    draftRedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    specUrl?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    winnerTeamId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MatchCreateManyBlueTeamInput = {
    id?: string
    lobbyId: string
    round: number
    indexInRound: number
    redTeamId: string
    draftBlueUrl?: string | null
    draftRedUrl?: string | null
    specUrl?: string | null
    state?: $Enums.MatchState
    winnerTeamId?: string | null
  }

  export type MatchCreateManyRedTeamInput = {
    id?: string
    lobbyId: string
    round: number
    indexInRound: number
    blueTeamId: string
    draftBlueUrl?: string | null
    draftRedUrl?: string | null
    specUrl?: string | null
    state?: $Enums.MatchState
    winnerTeamId?: string | null
  }

  export type MatchUpdateWithoutBlueTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    round?: IntFieldUpdateOperationsInput | number
    indexInRound?: IntFieldUpdateOperationsInput | number
    draftBlueUrl?: NullableStringFieldUpdateOperationsInput | string | null
    draftRedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    specUrl?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    winnerTeamId?: NullableStringFieldUpdateOperationsInput | string | null
    lobby?: LobbyUpdateOneRequiredWithoutMatchesNestedInput
    redTeam?: TeamUpdateOneRequiredWithoutRedMatchesNestedInput
  }

  export type MatchUncheckedUpdateWithoutBlueTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    lobbyId?: StringFieldUpdateOperationsInput | string
    round?: IntFieldUpdateOperationsInput | number
    indexInRound?: IntFieldUpdateOperationsInput | number
    redTeamId?: StringFieldUpdateOperationsInput | string
    draftBlueUrl?: NullableStringFieldUpdateOperationsInput | string | null
    draftRedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    specUrl?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    winnerTeamId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MatchUncheckedUpdateManyWithoutBlueTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    lobbyId?: StringFieldUpdateOperationsInput | string
    round?: IntFieldUpdateOperationsInput | number
    indexInRound?: IntFieldUpdateOperationsInput | number
    redTeamId?: StringFieldUpdateOperationsInput | string
    draftBlueUrl?: NullableStringFieldUpdateOperationsInput | string | null
    draftRedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    specUrl?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    winnerTeamId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MatchUpdateWithoutRedTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    round?: IntFieldUpdateOperationsInput | number
    indexInRound?: IntFieldUpdateOperationsInput | number
    draftBlueUrl?: NullableStringFieldUpdateOperationsInput | string | null
    draftRedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    specUrl?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    winnerTeamId?: NullableStringFieldUpdateOperationsInput | string | null
    lobby?: LobbyUpdateOneRequiredWithoutMatchesNestedInput
    blueTeam?: TeamUpdateOneRequiredWithoutBlueMatchesNestedInput
  }

  export type MatchUncheckedUpdateWithoutRedTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    lobbyId?: StringFieldUpdateOperationsInput | string
    round?: IntFieldUpdateOperationsInput | number
    indexInRound?: IntFieldUpdateOperationsInput | number
    blueTeamId?: StringFieldUpdateOperationsInput | string
    draftBlueUrl?: NullableStringFieldUpdateOperationsInput | string | null
    draftRedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    specUrl?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    winnerTeamId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MatchUncheckedUpdateManyWithoutRedTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    lobbyId?: StringFieldUpdateOperationsInput | string
    round?: IntFieldUpdateOperationsInput | number
    indexInRound?: IntFieldUpdateOperationsInput | number
    blueTeamId?: StringFieldUpdateOperationsInput | string
    draftBlueUrl?: NullableStringFieldUpdateOperationsInput | string | null
    draftRedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    specUrl?: NullableStringFieldUpdateOperationsInput | string | null
    state?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    winnerTeamId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LobbyParticipantCreateManyProfileInput = {
    id?: string
    lobbyId: string
    isCaptain?: boolean
    isSub?: boolean
    selectedRole?: $Enums.RoleName | null
    teamNumber?: number | null
  }

  export type LobbyParticipantUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isSub?: BoolFieldUpdateOperationsInput | boolean
    selectedRole?: NullableEnumRoleNameFieldUpdateOperationsInput | $Enums.RoleName | null
    teamNumber?: NullableIntFieldUpdateOperationsInput | number | null
    lobby?: LobbyUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type LobbyParticipantUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    lobbyId?: StringFieldUpdateOperationsInput | string
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isSub?: BoolFieldUpdateOperationsInput | boolean
    selectedRole?: NullableEnumRoleNameFieldUpdateOperationsInput | $Enums.RoleName | null
    teamNumber?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LobbyParticipantUncheckedUpdateManyWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    lobbyId?: StringFieldUpdateOperationsInput | string
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isSub?: BoolFieldUpdateOperationsInput | boolean
    selectedRole?: NullableEnumRoleNameFieldUpdateOperationsInput | $Enums.RoleName | null
    teamNumber?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use LobbyCountOutputTypeDefaultArgs instead
     */
    export type LobbyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LobbyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamCountOutputTypeDefaultArgs instead
     */
    export type TeamCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserProfileCountOutputTypeDefaultArgs instead
     */
    export type UserProfileCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserProfileCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LobbyDefaultArgs instead
     */
    export type LobbyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LobbyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamDefaultArgs instead
     */
    export type TeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MatchDefaultArgs instead
     */
    export type MatchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MatchDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserProfileDefaultArgs instead
     */
    export type UserProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LobbyParticipantDefaultArgs instead
     */
    export type LobbyParticipantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LobbyParticipantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlayerStatsDefaultArgs instead
     */
    export type PlayerStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlayerStatsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}